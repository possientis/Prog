write intro to prop 72.

locally small case: (F,G) adjunction <-> F* ~ G*

F1:C->D1, F2:C -> D2, define <F1,F2>:C -> D1xD2
cocartesian functor: SetxSet -> Set , F(a1,a2) = a1 + a2

Initial algebras, Terminal co-algebras:

category of F-algebra for F:C-> C : Alg(F)
F ~ G => Alg(F) ? Alg(G)
same developement for co-algebras
F(c)(a) = sum_{k in n} c_k . a^k, (c in Set^n), then Alg(F(c)) has initial object
Lambek's lemma (initial object in Alg(F) is an isomorphism)

initial type of a bifunctor : F : A x C -> C:
Assume F(a,-) : C -> C has an initial algebra, mu(a) : F(a,L(a)) -> L(a)
These are not unique (only up to iso), but assume family of mu(a) and L(a) given.
We have L:ob A -> ob C, can be extended into a functor L:A -> C
but then the question arises as to whether:
mu(a) : F (a, L(a)) -> L(a) is actually a natural transformation
mu : F . <id(A),L>  => L which it is.
remarkable fact is that we get a natural transformation despite an arbitrary choice of mu(a)
(L(a) only determined up to iso)

Th: Let F:C->C functor with initial alg mu:F m -> m. Let 
alpha:F a -> a and beta : F b -> b algebras. Assume C has finite 
products. Then <[alpha],[beta]> : m -> a x b is itself a catamorphism
(with base functor F) namely [<alpha . F(p1), beta . F(p2)>]

Polynomial functors Set:

F(c) above.
1. id : Set -> Set is polynomial
2. F,G: Set -> Set polynomial => G . F polynomial
3. F,G: Set -> Set polynomial => F + G and FG polynomial where:
   (F + G) (a) = F a + G a (pointwise sum)
   (F + G) (f) = F f + F g
   (FG)(a) = F(a)xG(a)
   (FG)(f) = F(f)xG(f)
   laws modulo natural isos

Horizontal composition of nats:
Horizontal composition
composing a nat with a functor F . alpha
composing a nat with a functor alpha . F

Set and co:
define Par (category of sets and partial functions)
define Rel (category os sets and relations)
define the notion of sub-category: Set <= Par <= Rel ?
define the List : Set -> Set
define the power set functor : Set -> Set 

General:
define a initial/terminal object

Product:
define product of two objects. 
C(-,a)xC(-,b):C^op -> Set  is representable <-> axb exists
Global product: assume we have F:ob C x ob C -> ob C, and
alpha : forall a b : ob C, Iso[C(-,a)xC(-,b),C(-,F(a,b))]
define fundamental split bracket: f1: c -> a , f:c -> b
<f1,f2> : c -> F(a,b) , <f1,f2> = alpha_c (a,b) (f1,f2)
Lemma1: forall a b, there is a unique (p1, p2) such that
p1 : F(a,b) -> a and p2 : F(a,b) -> b such that 
<p1, p2> = id (F(a,b))
Lemma2: forall f1:c -> a f2:c -> b we have:
    <f.p1,f.p2> = f
Lemma3: <f1,g1> = <f2,g2> => f1 = f2 /\ g1 = g2
Lemma4: p1.<f,g> = f /\ p2.<f,g> = g
Extend F to a functor : F : C x C -> C with F(f1,f2) = <f1.p1,f2.p2>
Lemma5: alpha_c (a,b) : C(c,a)xC(c,b) -> C(c,F(a,b)) is 
actually natural in a b c. (C^op x (C x C) -> Set)
Lemma6: p1 : F(a,b) -> a , p2: F(a,b) -> b are natural in a,b

define exponential object from b to c: (c^b,ev) 
  where ev:c^b x b -> c with universal prop:
  for all a and f:axb -> c , there is a unique g:a -> c^b , such that
  ev . (g x id(b)) = f
bifunctor, profunctor
partial functors F(A1,-), F(-,A2) of a bifunctor
partial natural trans alpha(A1,-) alpha(-,A2) of a nat between bifunctors
Define 'transformation' (all but comm square)
Lemma: a trans is natural iff both partial trans are natural

p1 . <f,g> = f , p2 . <f,g> = g (split cancellation)
<f,g>.u = <f.u,g.u> (split fusion)

Cones:
Paper:FixedPointFunctors
Graphs. free category generated by a graph.
I cat. Diagram of type I in C = functor Delta:I -> C
define the category cone_C(a,b) 
product of (a,b) <-> terminal in Cone_C(a,b)
! : I => K_1 for any terminal 1 in C

Global producs and sums:
C: with (x) : CxC -> C, (x) should be a functor F such that
C(c,a)xC(c,b) naturally isomorphic to C(c,F(a,b))
similar idea for (+)
polynomial functors on C and laws modulo natural isos

