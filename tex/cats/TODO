Study the 4 equivalent definitions of adjunctions
Define an adjunction
F1:C->D1, F2:C -> D2, define <F1,F2>:C -> D1xD2
cocartesian functor: SetxSet -> Set , F(a1,a2) = a1 + a2

Initial algebras, Terminal co-algebras:

category of F-algebra for F:C-> C : Alg(F)
F ~ G => Alg(F) ? Alg(G)
same developement for co-algebras
F(c)(a) = sum_{k in n} c_k . a^k, (c in Set^n), then Alg(F(c)) has initial object
Lambek's lemma (initial object in Alg(F) is an isomorphism)

Th: Let F:C->C functor with initial alg mu:F m -> m. Let 
alpha:F a -> a and beta : F b -> b algebras. Assume C has finite 
products. Then <[alpha],[beta]> : m -> a x b is itself a catamorphism
(with base functor F) namely [<alpha . F(pi1), beta . F(p2)>]

Polynomial functors Set:

F(c) above.
1. id : Set -> Set is polynomial
2. F,G: Set -> Set polynomial => G . F polynomial
3. F,G: Set -> Set polynomial => F + G and FG polynomial where:
   (F + G) (a) = F a + G a (pointwise sum)
   (F + G) (f) = F f + F g
   (FG)(a) = F(a)xG(a)
   (FG)(f) = F(f)xG(f)
   laws modulo natural isos

Horizontal composition of nats:
Horizontal composition
composing a nat with a functor F . alpha
composing a nat with a functor alpha . F

Set and co:
define Par (category of sets and partial functions)
define Rel (category os sets and relations)
define the notion of sub-category: Set <= Par <= Rel ?
define the List : Set -> Set
define the power set functor : Set -> Set 

General:
define a initial/terminal object
define a coproduct/product of two objects
bifunctor, profunctor
F(A1,-), F(-,A2)
p1 . <f,g> = f , p2 . <f,g> = g (split cancellation)
<f,g>.u = <f.u,g.u> (split fusion)

Cones:
Paper:FixedPointFunctors
Graphs. free category generated by a graph.
I cat. Diagram of type I in C = functor Delta:I -> C
define the category cone_C(a,b) 
product of (a,b) <-> terminal in Cone_C(a,b)
! : I => K_1 for any terminal 1 in C

Global producs and sums:
C: with (x) : CxC -> C, (x) should be a functor F such that
C(c,a)xC(c,b) naturally isomorphic to C(c,F(a,b))
similar idea for (+)
polynomial functors on C and laws modulo natural isos

