(load "connect.scm")

(define (connect-test)
  ;; defining wires for testing
  (define a (wire))
  (define b (wire))
  ;;
  (global 'unit-test-true!)    ; disables display of certain error messages
  (global 'error-count-reset!) ; allows to check certain errors do occur
  ;; start
  (display "connect: starting unit test\n")
  ;; connecting wires
  (begin (connect a b) (global 'propagate!))
  ;; checking initial states
  (if (not (eq? '() (a 'get-signal))) (display "connect: unit-test 1 failing\n"))
  (if (not (eq? '() (b 'get-signal))) (display "connect: unit-test 2 failing\n"))
  ;; changing a from '() to '()
  (begin ((a 'set-signal!) '() 'x) (global 'propagate!))
  (if (not (eq? '() (a 'get-signal))) (display "connect: unit-test 3 failing\n"))
  (if (not (eq? '() (b 'get-signal))) (display "connect: unit-test 4 failing\n"))
  ;; changing a from '() to #f
  (begin ((a 'set-signal!) #f 'x) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 5 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 6 failing\n"))
  ;; changing a from #f to #f
  (begin ((a 'set-signal!) #f 'x) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 7 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 8 failing\n"))
  ;; changing a from #f to #t
  (begin ((a 'set-signal!) #t 'x) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 9 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 10 failing\n"))
  ;; changing a from #t to #t
  (begin ((a 'set-signal!) #t 'x) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 11 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 12 failing\n"))
  ;; changing a from #t to '()
  (begin ((a 'set-signal!) '() 'x) (global 'propagate!))
  (if (not (eq? '() (a 'get-signal))) (display "connect: unit-test 13 failing\n"))
  (if (not (eq? '() (b 'get-signal))) (display "connect: unit-test 14 failing\n"))
  ;; changing b from '() to '()
  (begin ((b 'set-signal!) '() 'y) (global 'propagate!))
  (if (not (eq? '() (a 'get-signal))) (display "connect: unit-test 15 failing\n"))
  (if (not (eq? '() (b 'get-signal))) (display "connect: unit-test 16 failing\n"))
  ;; changing b from '() to #f
  (begin ((b 'set-signal!) #f 'y) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 17 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 18 failing\n"))
  ;; changing b from #f to #f
  (begin ((b 'set-signal!) #f 'y) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 19 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 20 failing\n"))
  ;; changing b from #f to #t
  (begin ((b 'set-signal!) #t 'y) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 21 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 22 failing\n"))
  ;; changing b from #t to #t
  (begin ((b 'set-signal!) #t 'y) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 23 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 24 failing\n"))
  ;; changing b from #t to'()
  (begin ((b 'set-signal!) '() 'y) (global 'propagate!))
  (if (not (eq? '() (a 'get-signal))) (display "connect: unit-test 25 failing\n"))
  (if (not (eq? '() (b 'get-signal))) (display "connect: unit-test 26 failing\n"))
  ;; setting b to #f
  (begin ((b 'set-signal!) #f 'y) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 27 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 28 failing\n"))
  ;; changing a from #f to'() while b is #f (should have no impact)
  (begin ((a 'set-signal!) '() 'x) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 29 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 30 failing\n"))
  ;; changing a from #f to #f while b is #f (should have no impact)
  (begin ((a 'set-signal!) #f 'x) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 31 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 32 failing\n"))
  ;; changing a from #f to #t while b is #f (should fail and produce error)
  (if(not(= 0 (global 'error-count)))(display "connect: unit-test 33 failing\n"))
  (begin ((a 'set-signal!) #t 'x) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 34 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 35 failing\n"))
  (if(not(= 1 (global 'error-count)))(display "connect: unit-test 36 failing\n"))
  ;; setting b to #t
  (begin ((b 'set-signal!) #t 'y) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 36 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 37 failing\n"))
  ;; changing a from #t to'() while b is #t (should have no impact)
  (begin ((a 'set-signal!) '() 'x) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 38 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 39 failing\n"))
  ;; changing a from #t to #t while b is #t (should have no impact)
  (begin ((a 'set-signal!) #t 'x) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 40 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 41 failing\n"))
  ;; changing a from #t to #f while b is #t (should fail and produce error)
  (if(not(= 1 (global 'error-count)))(display "connect: unit-test 42 failing\n"))
  (begin ((a 'set-signal!) #f 'x) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 43 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 44 failing\n"))
  (if(not(= 2 (global 'error-count)))(display "connect: unit-test 45 failing\n"))
  ;; setting b back to neutral
  (begin ((b 'set-signal!) '() 'y) (global 'propagate!))
  (if (not (eq? '() (a 'get-signal))) (display "connect: unit-test 46 failing\n"))
  (if (not (eq? '() (b 'get-signal))) (display "connect: unit-test 47 failing\n"))
  ;; setting a to #f
  (begin ((a 'set-signal!) #f 'x) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 48 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 49 failing\n"))
  ;; changing b from #f to '() while a is #f (should have no impact)
  (begin ((b 'set-signal!) '() 'y) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 50 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 51 failing\n"))
  ;; changing b from #f to #f while a is #f (should have no impact)
  (begin ((b 'set-signal!) #f 'y) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 52 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 53 failing\n"))
  ;; changing b from #f to #t while a is #f (should fail and produce error)
  (if(not(= 2 (global 'error-count)))(display "connect: unit-test 54 failing\n"))
  (begin ((b 'set-signal!) #t 'y) (global 'propagate!))
  (if (not (eq? #f (a 'get-signal))) (display "connect: unit-test 55 failing\n"))
  (if (not (eq? #f (b 'get-signal))) (display "connect: unit-test 56 failing\n"))
  (if(not(= 3 (global 'error-count)))(display "connect: unit-test 57 failing\n"))
  ;; setting a to #t
  (begin ((a 'set-signal!) #t 'x) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 58 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 59 failing\n"))
  ;; changing b from #t to '() while a is #t (should have no impact)
  (begin ((b 'set-signal!) '() 'y) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 60 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 61 failing\n"))
  ;; changing b from #t to #t while a is #t (should have no impact)
  (begin ((b 'set-signal!) #t 'y) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 62 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 63 failing\n"))
  ;; changing b from #t to #f while a is #t (should fail and produce error)
  (if(not(= 3 (global 'error-count)))(display "connect: unit-test 64 failing\n"))
  (begin ((b 'set-signal!) #f 'y) (global 'propagate!))
  (if (not (eq? #t (a 'get-signal))) (display "connect: unit-test 65 failing\n"))
  (if (not (eq? #t (b 'get-signal))) (display "connect: unit-test 66 failing\n"))
  (if(not(= 4 (global 'error-count)))(display "connect: unit-test 67 failing\n"))
  ;; exiting
  (global 'time-reset!)
  (global 'unit-test-false!)
  (global 'error-count-reset!)
  (display "connect: unit test complete\n"))

(connect-test)
(quit)


