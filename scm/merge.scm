(define (merge xs ys)
  (cond ((null? xs) ys)
        ((null? ys) xs)
        (else (if (< (car xs) (car ys))
                (cons (car xs) (merge (cdr xs) ys))
                (cons (car ys) (merge xs (cdr ys)))))))

(define (split xs)
  (cond ((null? xs) (cons '() '()))
        ((null? (cdr xs)) (cons xs '()))
        (else (let ((xr (split (cddr xs))))
                (cons (cons (car xs) (car xr))
                      (cons (cadr xs) (cdr xr)))))))

(define (merge-sort xs)
  (cond ((null? xs) '())
        ((null? (cdr xs)) xs)
        (else (let ((xr (split xs)))
                (merge (merge-sort (car xr))
                       (merge-sort (cdr xr)))))))
