(load "dict.scm")


(define (dict-test)
  ;;
  (define a (dictionary))
  (define b (dictionary))
  ;;
  (display"dictionary starting unit test\n")
  ;; first insert
  ((a 'insert!) 1 10)
  ((b 'insert!) "abc" 100)
  (if(not (a 'check))(display"dictionary: unit test 1.1 failing\n"))
  (if(not (b 'check))(display"dictionary: unit test 1.2 failing\n"))
  ;; should fail
  (if(not (eq? #f ((a 'find) 0)))(display"dictionary: unit test 1 failing\n"))
  (if(not (eq? #f ((b 'find) "abd")))(display"dictionary: unit test 2 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x)(display"dictionary: unit test 3 failing\n"))
    (if (not (equal? 1 (car x)))(display"dictionary: unit test 4 failing\n"))
    (if (not (= 10 (cdr x)))(display"dictionary: unit test 5 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if (eq? #f x)(display"dictionary: unit test 6 failing\n"))
    (if (not (equal? "abc"  (car x)))(display"dictionary: unit test 7 failing\n"))
    (if (not (= 100 (cdr x)))(display"dictionary: unit test 8 failing\n")))
  ;; second insert
  ((a 'insert!) 2 20)
  ((b 'insert!) "def" 200)
  (if(not(a 'check))(display"dictionary: unit test 8.1 failing\n"))
  (if(not(b 'check))(display"dictionary: unit test 8.2 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0)))(display"dictionary: unit test 9 failing\n"))
  (if(not(eq? #f ((b 'find) "abd")))(display"dictionary: unit test 10 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x)(display"dictionary: unit test 11 failing\n"))
    (if (not (equal? 1 (car x)))(display"dictionary: unit test 12 failing\n"))
    (if (not (= 10 (cdr x)))(display"dictionary: unit test 13 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x)(display"dictionary: unit test 14 failing\n"))
    (if(not (equal? "abc"  (car x)))(display"dictionary: unit test 15 failing\n"))
    (if (not (= 100 (cdr x)))(display"dictionary: unit test 16 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x)(display"dictionary: unit test 17 failing\n"))
    (if (not (equal? 2 (car x)))(display"dictionary: unit test 18 failing\n"))
    (if (not (= 20 (cdr x)))(display"dictionary: unit test 19 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x)(display"dictionary: unit test 20 failing\n"))
    (if(not (equal? "def"  (car x)))(display"dictionary: unit test 21 failing\n"))
    (if (not (= 200 (cdr x)))(display"dictionary: unit test 22 failing\n")))
  ;; third insert
  ((a 'insert!) 3 30)
  ((b 'insert!) "hij" 300)
  (if (not(a 'check))(display"dictionary: unit test 23 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 24 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0)))(display"dictionary: unit test 25 failing\n"))
  (if(not(eq? #f ((b 'find) "abd")))(display"dictionary: unit test 26 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x)(display"dictionary: unit test 27 failing\n"))
    (if (not (equal? 1 (car x)))(display"dictionary: unit test 28 failing\n"))
    (if (not (= 10 (cdr x)))(display"dictionary: unit test 29 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x)(display"dictionary: unit test 30 failing\n"))
    (if(not (equal? "abc"  (car x)))(display"dictionary: unit test 31 failing\n"))
    (if (not (= 100 (cdr x)))(display"dictionary: unit test 32 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x)(display"dictionary: unit test 33 failing\n"))
    (if (not (equal? 2 (car x)))(display"dictionary: unit test 34 failing\n"))
    (if (not (= 20 (cdr x)))(display"dictionary: unit test 35 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x)(display"dictionary: unit test 36 failing\n"))
    (if(not (equal? "def"  (car x)))(display"dictionary: unit test 37 failing\n"))
    (if(not (= 200 (cdr x)))(display"dictionary: unit test 38 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x)(display"dictionary: unit test 39 failing\n"))
    (if (not (equal? 3 (car x)))(display"dictionary: unit test 40 failing\n"))
    (if (not (= 30 (cdr x)))(display"dictionary: unit test 41 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x)(display"dictionary: unit test 42 failing\n"))
    (if(not (equal? "hij"  (car x)))(display"dictionary: unit test 43 failing\n"))
    (if(not (= 300 (cdr x)))(display"dictionary: unit test 44 failing\n")))
  ;; fourth insert
  ((a 'insert!) 4 40)
  ((b 'insert!) "klm" 400)
  (if (not(a 'check))(display"dictionary: unit test 45 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 46 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0)))(display"dictionary: unit test 47 failing\n"))
  (if(not(eq? #f ((b 'find) "abd")))(display"dictionary: unit test 48 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x)(display"dictionary: unit test 49 failing\n"))
    (if (not (equal? 1 (car x)))(display"dictionary: unit test 50 failing\n"))
    (if (not (= 10 (cdr x)))(display"dictionary: unit test 51 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x)(display"dictionary: unit test 52 failing\n"))
    (if(not (equal? "abc"  (car x)))(display"dictionary: unit test 53 failing\n"))
    (if (not (= 100 (cdr x)))(display"dictionary: unit test 54 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x)(display"dictionary: unit test 55 failing\n"))
    (if (not (equal? 2 (car x)))(display"dictionary: unit test 56 failing\n"))
    (if (not (= 20 (cdr x)))(display"dictionary: unit test 57 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x)(display"dictionary: unit test 58 failing\n"))
    (if(not (equal? "def"  (car x)))(display"dictionary: unit test 59 failing\n"))
    (if(not (= 200 (cdr x)))(display"dictionary: unit test 60 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x)(display"dictionary: unit test 61 failing\n"))
    (if (not (equal? 3 (car x)))(display"dictionary: unit test 62 failing\n"))
    (if (not (= 30 (cdr x)))(display"dictionary: unit test 63 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x)(display"dictionary: unit test 64 failing\n"))
    (if(not (equal? "hij"  (car x)))(display"dictionary: unit test 65 failing\n"))
    (if(not (= 300 (cdr x)))(display"dictionary: unit test 66 failing\n")))
  (let ((x ((a 'find) 4)))
    (if (eq? #f x)(display"dictionary: unit test 67 failing\n"))
    (if (not (equal? 4 (car x)))(display"dictionary: unit test 68 failing\n"))
    (if (not (= 40 (cdr x)))(display"dictionary: unit test 69 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x)(display"dictionary: unit test 70 failing\n"))
    (if(not (equal? "klm"  (car x)))(display"dictionary: unit test 71 failing\n"))
    (if(not (= 400 (cdr x)))(display"dictionary: unit test 72 failing\n")))
  ;; fifth insert
  ((a 'insert!) 5 50)
  ((b 'insert!) "nop" 500)
  (if (not(a 'check))(display"dictionary: unit test 73 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 74 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0)))(display"dictionary: unit test 75 failing\n"))
  (if(not(eq? #f ((b 'find) "abd")))(display"dictionary: unit test 76 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x)(display"dictionary: unit test 77 failing\n"))
    (if (not (equal? 1 (car x)))(display"dictionary: unit test 78 failing\n"))
    (if (not (= 10 (cdr x)))(display"dictionary: unit test 79 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x)(display"dictionary: unit test 80 failing\n"))
    (if(not (equal? "abc"  (car x)))(display"dictionary: unit test 81 failing\n"))
    (if (not (= 100 (cdr x)))(display"dictionary: unit test 82 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x)(display"dictionary: unit test 83 failing\n"))
    (if (not (equal? 2 (car x)))(display"dictionary: unit test 84 failing\n"))
    (if (not (= 20 (cdr x)))(display"dictionary: unit test 85 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x)(display"dictionary: unit test 86 failing\n"))
    (if(not (equal? "def"  (car x)))(display"dictionary: unit test 87 failing\n"))
    (if(not (= 200 (cdr x)))(display"dictionary: unit test 88 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x)(display"dictionary: unit test 89 failing\n"))
    (if (not (equal? 3 (car x)))(display"dictionary: unit test 90 failing\n"))
    (if (not (= 30 (cdr x)))(display"dictionary: unit test 91 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x)(display"dictionary: unit test 92 failing\n"))
    (if(not (equal? "hij"  (car x)))(display"dictionary: unit test 93 failing\n"))
    (if(not (= 300 (cdr x)))(display"dictionary: unit test 94 failing\n")))
  (let ((x ((a 'find) 4)))
    (if (eq? #f x)(display"dictionary: unit test 95 failing\n"))
    (if (not (equal? 4 (car x)))(display"dictionary: unit test 96 failing\n"))
    (if (not (= 40 (cdr x)))(display"dictionary: unit test 97 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x)(display"dictionary: unit test 98 failing\n"))
    (if(not (equal? "klm"  (car x)))(display"dictionary: unit test 99 failing\n"))
    (if(not (= 400 (cdr x)))(display"dictionary: unit test 100 failing\n")))
  (let ((x ((a 'find) 5)))
    (if (eq? #f x)(display"dictionary: unit test 101 failing\n"))
    (if (not (equal? 5 (car x)))(display"dictionary: unit test 102 failing\n"))
    (if (not (= 50 (cdr x)))(display"dictionary: unit test 103 failing\n")))
  (let ((x ((b 'find) "nop")))
    (if(eq? #f x)(display"dictionary: unit test 104 failing\n"))
    (if(not(equal? "nop"  (car x)))(display"dictionary: unit test 105 failing\n"))
    (if(not (= 500 (cdr x)))(display"dictionary: unit test 106 failing\n")))
  ;; sixth insert (partial find checks)
  ((a 'insert!) 6 60)
  ((b 'insert!) "qrs" 600)
  (if (not(a 'check))(display"dictionary: unit test 107 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 108 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 6)))
    (if (eq? #f x)(display"dictionary: unit test 109 failing\n"))
    (if (not (equal? 6 (car x)))(display"dictionary: unit test 110 failing\n"))
    (if (not (= 60 (cdr x)))(display"dictionary: unit test 111 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x)(display"dictionary: unit test 112 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display"dictionary: unit test 113 failing\n"))
    (if (not (= 600 (cdr x)))(display"dictionary: unit test 114 failing\n")))
  ;; extra test: turns out there is a collision here on scm
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x)(display"dictionary: unit test 115 failing\n"))
    (if(not(equal? "abc"  (car x)))(display"dictionary: unit test 116 failing\n"))
    (if (not (= 100 (cdr x)))(display"dictionary: unit test 117 failing\n")))
  ;; seventh insert (partial find checks)
  ((a 'insert!) 7 70)
  ((b 'insert!) "tuv" 700)
  (if (not(a 'check))(display"dictionary: unit test 118 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 119 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 120 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 121 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 122 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 123 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 124 failing\n"))
    (if (not (= 700 (cdr x)))(display"dictionary: unit test 125 failing\n")))
  ;; eigth insert (partial find checks)
  ((a 'insert!) 8 80)
  ((b 'insert!) "wxy" 800)
  (if (not(a 'check))(display"dictionary: unit test 126 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 127 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 128 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 129 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 130 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 131 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 132 failing\n"))
    (if (not (= 800 (cdr x)))(display"dictionary: unit test 133 failing\n")))
 ;; ninth insert (partial find checks)
  ((a 'insert!) 9 90)
  ((b 'insert!) "zab" 900)
  (if (not(a 'check))(display"dictionary: unit test 134 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 135 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 136 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 137 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 138 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 139 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 140 failing\n"))
    (if (not (= 900 (cdr x)))(display"dictionary: unit test 141 failing\n")))
  ;; insert of duplicate keys
  ((a 'insert!) 1 11)
  ((b 'insert!) "abc" 110)
  (if (not(a 'check))(display"dictionary: unit test 142 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 143 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x)(display"dictionary: unit test 144 failing\n"))
    (if (not (equal? 1 (car x)))(display"dictionary: unit test 145 failing\n"))
    (if (not (= 11 (cdr x)))(display"dictionary: unit test 146 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x)(display"dictionary: unit test 147 failing\n"))
    (if(not(equal? "abc"  (car x)))(display"dictionary: unit test 148 failing\n"))
    (if (not (= 110 (cdr x)))(display"dictionary: unit test 149 failing\n")))
  ;; first delete
  ((a 'delete!) 1)
  ((b 'delete!) "abc")
  (if (not(a 'check))(display"dictionary: unit test 150 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 151 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 1)))(display"dictionary: unit test 152 failing\n"))
  (if(not(eq? #f ((b 'find) "abc")))(display"dictionary: unit test 153 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 2)))
    (if (eq? #f x)(display"dictionary: unit test 154 failing\n"))
    (if (not (equal? 2 (car x)))(display"dictionary: unit test 155 failing\n"))
    (if (not (= 20 (cdr x)))(display"dictionary: unit test 156 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x)(display"dictionary: unit test 157 failing\n"))
    (if(not(equal? "def"  (car x)))(display"dictionary: unit test 158 failing\n"))
    (if(not (= 200 (cdr x)))(display"dictionary: unit test 159 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x)(display"dictionary: unit test 160 failing\n"))
    (if (not (equal? 3 (car x)))(display"dictionary: unit test 161 failing\n"))
    (if (not (= 30 (cdr x)))(display"dictionary: unit test 162 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x)(display"dictionary: unit test 162 failing\n"))
    (if(not(equal? "hij"  (car x)))(display"dictionary: unit test 163 failing\n"))
    (if(not (= 300 (cdr x)))(display"dictionary: unit test 164 failing\n")))
  (let ((x ((a 'find) 4)))
    (if (eq? #f x)(display"dictionary: unit test 165 failing\n"))
    (if (not (equal? 4 (car x)))(display"dictionary: unit test 165 failing\n"))
    (if (not (= 40 (cdr x)))(display"dictionary: unit test 166 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x)(display"dictionary: unit test 167 failing\n"))
    (if(not(equal? "klm"  (car x)))(display"dictionary: unit test 168 failing\n"))
    (if(not (= 400 (cdr x)))(display"dictionary: unit test 169 failing\n")))
  (let ((x ((a 'find) 5)))
    (if (eq? #f x)(display"dictionary: unit test 170 failing\n"))
    (if (not (equal? 5 (car x)))(display"dictionary: unit test 171 failing\n"))
    (if (not (= 50 (cdr x)))(display"dictionary: unit test 172 failing\n")))
  (let ((x ((b 'find) "nop")))
    (if(eq? #f x)(display"dictionary: unit test 173 failing\n"))
    (if(not(equal? "nop"  (car x)))(display"dictionary: unit test 174 failing\n"))
    (if(not (= 500 (cdr x)))(display"dictionary: unit test 175 failing\n")))
  (let ((x ((a 'find) 6)))
    (if (eq? #f x)(display"dictionary: unit test 170 failing\n"))
    (if (not (equal? 6 (car x)))(display"dictionary: unit test 176 failing\n"))
    (if (not (= 60 (cdr x)))(display"dictionary: unit test 177 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x)(display"dictionary: unit test 173 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display"dictionary: unit test 178 failing\n"))
    (if(not (= 600 (cdr x)))(display"dictionary: unit test 179 failing\n")))
  (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 180 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 181 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 182 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 183 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 184 failing\n"))
    (if(not (= 700 (cdr x)))(display"dictionary: unit test 185 failing\n")))
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 186 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 187 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 188 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 189 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 190 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 191 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 192 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 193 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 194 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 195 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 196 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 197 failing\n")))
  ;; second delete
  ((a 'delete!) 2)
  ((b 'delete!) "def")
  (if (not(a 'check))(display"dictionary: unit test 198 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 199 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 2)))(display"dictionary: unit test 200 failing\n"))
  (if(not(eq? #f ((b 'find) "def")))(display"dictionary: unit test 201 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 3)))
    (if (eq? #f x)(display"dictionary: unit test 202 failing\n"))
    (if (not (equal? 3 (car x)))(display"dictionary: unit test 203 failing\n"))
    (if (not (= 30 (cdr x)))(display"dictionary: unit test 204 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x)(display"dictionary: unit test 205 failing\n"))
    (if(not(equal? "hij"  (car x)))(display"dictionary: unit test 206 failing\n"))
    (if(not (= 300 (cdr x)))(display"dictionary: unit test 207 failing\n")))
  (let ((x ((a 'find) 4)))
    (if (eq? #f x)(display"dictionary: unit test 208 failing\n"))
    (if (not (equal? 4 (car x)))(display"dictionary: unit test 209 failing\n"))
    (if (not (= 40 (cdr x)))(display"dictionary: unit test 210 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x)(display"dictionary: unit test 211 failing\n"))
    (if(not(equal? "klm"  (car x)))(display"dictionary: unit test 212 failing\n"))
    (if(not (= 400 (cdr x)))(display"dictionary: unit test 213 failing\n")))
  (let ((x ((a 'find) 5)))
    (if (eq? #f x)(display"dictionary: unit test 214 failing\n"))
    (if (not (equal? 5 (car x)))(display"dictionary: unit test 215 failing\n"))
    (if (not (= 50 (cdr x)))(display"dictionary: unit test 216 failing\n")))
  (let ((x ((b 'find) "nop")))
    (if(eq? #f x)(display"dictionary: unit test 217 failing\n"))
    (if(not(equal? "nop"  (car x)))(display"dictionary: unit test 218 failing\n"))
    (if(not (= 500 (cdr x)))(display"dictionary: unit test 219 failing\n")))
  (let ((x ((a 'find) 6)))
    (if (eq? #f x)(display"dictionary: unit test 220 failing\n"))
    (if (not (equal? 6 (car x)))(display"dictionary: unit test 221 failing\n"))
    (if (not (= 60 (cdr x)))(display"dictionary: unit test 222 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x)(display"dictionary: unit test 223 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display"dictionary: unit test 224 failing\n"))
    (if(not (= 600 (cdr x)))(display"dictionary: unit test 225 failing\n")))
  (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 226 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 227 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 228 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 229 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 230 failing\n"))
    (if(not (= 700 (cdr x)))(display"dictionary: unit test 231 failing\n")))
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 232 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 233 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 234 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 235 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 236 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 237 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 238 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 239 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 240 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 241 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 242 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 243 failing\n")))
  ;; third delete
  ((a 'delete!) 3)
  ((b 'delete!) "hij")
  (if (not(a 'check))(display"dictionary: unit test 244 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 245 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 3)))(display"dictionary: unit test 246 failing\n"))
  (if(not(eq? #f ((b 'find) "hij")))(display"dictionary: unit test 247 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 4)))
    (if (eq? #f x)(display"dictionary: unit test 248 failing\n"))
    (if (not (equal? 4 (car x)))(display"dictionary: unit test 249 failing\n"))
    (if (not (= 40 (cdr x)))(display"dictionary: unit test 250 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x)(display"dictionary: unit test 251 failing\n"))
    (if(not(equal? "klm"  (car x)))(display"dictionary: unit test 252 failing\n"))
    (if(not (= 400 (cdr x)))(display"dictionary: unit test 253 failing\n")))
  (let ((x ((a 'find) 5)))
    (if (eq? #f x)(display"dictionary: unit test 254 failing\n"))
    (if (not (equal? 5 (car x)))(display"dictionary: unit test 255 failing\n"))
    (if (not (= 50 (cdr x)))(display"dictionary: unit test 256 failing\n")))
  (let ((x ((b 'find) "nop")))
    (if(eq? #f x)(display"dictionary: unit test 257 failing\n"))
    (if(not(equal? "nop"  (car x)))(display"dictionary: unit test 258 failing\n"))
    (if(not (= 500 (cdr x)))(display"dictionary: unit test 259 failing\n")))
  (let ((x ((a 'find) 6)))
    (if (eq? #f x)(display"dictionary: unit test 260 failing\n"))
    (if (not (equal? 6 (car x)))(display"dictionary: unit test 261 failing\n"))
    (if (not (= 60 (cdr x)))(display"dictionary: unit test 262 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x)(display"dictionary: unit test 263 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display"dictionary: unit test 264 failing\n"))
    (if(not (= 600 (cdr x)))(display"dictionary: unit test 265 failing\n")))
  (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 266 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 267 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 268 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 269 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 270 failing\n"))
    (if(not (= 700 (cdr x)))(display"dictionary: unit test 271 failing\n")))
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 272 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 273 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 274 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 275 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 276 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 277 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 278 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 279 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 280 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 281 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 282 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 283 failing\n")))
  ;; fourth delete
  ((a 'delete!) 4)
  ((b 'delete!) "klm")
  (if (not(a 'check))(display"dictionary: unit test 284 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 285 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 4)))(display"dictionary: unit test 286 failing\n"))
  (if(not(eq? #f ((b 'find) "klm")))(display"dictionary: unit test 287 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 5)))
    (if (eq? #f x)(display"dictionary: unit test 288 failing\n"))
    (if (not (equal? 5 (car x)))(display"dictionary: unit test 289 failing\n"))
    (if (not (= 50 (cdr x)))(display"dictionary: unit test 290 failing\n")))
  (let ((x ((b 'find) "nop")))
    (if(eq? #f x)(display"dictionary: unit test 291 failing\n"))
    (if(not(equal? "nop"  (car x)))(display"dictionary: unit test 292 failing\n"))
    (if(not (= 500 (cdr x)))(display"dictionary: unit test 293 failing\n")))
  (let ((x ((a 'find) 6)))
    (if (eq? #f x)(display"dictionary: unit test 294 failing\n"))
    (if (not (equal? 6 (car x)))(display"dictionary: unit test 295 failing\n"))
    (if (not (= 60 (cdr x)))(display"dictionary: unit test 296 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x)(display"dictionary: unit test 297 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display"dictionary: unit test 298 failing\n"))
    (if(not (= 600 (cdr x)))(display"dictionary: unit test 299 failing\n")))
  (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 300 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 301 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 302 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 303 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 304 failing\n"))
    (if(not (= 700 (cdr x)))(display"dictionary: unit test 305 failing\n")))
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 306 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 307 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 308 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 309 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 310 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 311 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 312 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 313 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 314 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 315 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 316 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 317 failing\n")))
  ;; fifth delete
  ((a 'delete!) 5)
  ((b 'delete!) "nop")
  (if (not(a 'check))(display"dictionary: unit test 318 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 319 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 5)))(display"dictionary: unit test 320 failing\n"))
  (if(not(eq? #f ((b 'find) "nop")))(display"dictionary: unit test 321 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 6)))
    (if (eq? #f x)(display"dictionary: unit test 322 failing\n"))
    (if (not (equal? 6 (car x)))(display"dictionary: unit test 323 failing\n"))
    (if (not (= 60 (cdr x)))(display"dictionary: unit test 324 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x)(display"dictionary: unit test 325 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display"dictionary: unit test 326 failing\n"))
    (if(not (= 600 (cdr x)))(display"dictionary: unit test 327 failing\n")))
  (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 328 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 329 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 330 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 331 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 332 failing\n"))
    (if(not (= 700 (cdr x)))(display"dictionary: unit test 333 failing\n")))
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 334 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 335 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 336 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 337 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 338 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 339 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 340 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 341 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 342 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 343 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 344 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 345 failing\n")))
  ;; sixth delete
  ((a 'delete!) 6)
  ((b 'delete!) "qrs")
  (if (not(a 'check))(display"dictionary: unit test 346 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 347 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 6)))(display"dictionary: unit test 348 failing\n"))
  (if(not(eq? #f ((b 'find) "qrs")))(display"dictionary: unit test 349 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 7)))
    (if (eq? #f x)(display"dictionary: unit test 350 failing\n"))
    (if (not (equal? 7 (car x)))(display"dictionary: unit test 351 failing\n"))
    (if (not (= 70 (cdr x)))(display"dictionary: unit test 352 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x)(display"dictionary: unit test 353 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display"dictionary: unit test 354 failing\n"))
    (if(not (= 700 (cdr x)))(display"dictionary: unit test 355 failing\n")))
  (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 356 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 357 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 358 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 359 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 360 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 361 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 362 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 363 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 364 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 365 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 366 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 367 failing\n")))
  ;; seventh delete
  ((a 'delete!) 7)
  ((b 'delete!) "tuv")
  (if (not(a 'check))(display"dictionary: unit test 368 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 369 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 7)))(display"dictionary: unit test 370 failing\n"))
  (if(not(eq? #f ((b 'find) "tuv")))(display"dictionary: unit test 371 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 372 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 373 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 374 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 375 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 376 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 377 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 378 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 379 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 380 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 381 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 382 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 383 failing\n")))
  ;; redundant delete
  ((a 'delete!) 7)
  ((b 'delete!) "tuv")
  (if (not(a 'check))(display"dictionary: unit test 384 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 385 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 7)))(display"dictionary: unit test 386 failing\n"))
  (if(not(eq? #f ((b 'find) "tuv")))(display"dictionary: unit test 387 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 8)))
    (if (eq? #f x)(display"dictionary: unit test 388 failing\n"))
    (if (not (equal? 8 (car x)))(display"dictionary: unit test 389 failing\n"))
    (if (not (= 80 (cdr x)))(display"dictionary: unit test 390 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x)(display"dictionary: unit test 391 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display"dictionary: unit test 392 failing\n"))
    (if(not (= 800 (cdr x)))(display"dictionary: unit test 393 failing\n")))
  (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 394 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 395 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 396 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 397 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 398 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 399 failing\n")))
  ;; eighth delete
  ((a 'delete!) 8)
  ((b 'delete!) "wxy")
  (if (not(a 'check))(display"dictionary: unit test 400 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 401 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 8)))(display"dictionary: unit test 402 failing\n"))
  (if(not(eq? #f ((b 'find) "wxy")))(display"dictionary: unit test 403 failing\n"))
  ;; should succeed
 (let ((x ((a 'find) 9)))
    (if (eq? #f x)(display"dictionary: unit test 404 failing\n"))
    (if (not (equal? 9 (car x)))(display"dictionary: unit test 405 failing\n"))
    (if (not (= 90 (cdr x)))(display"dictionary: unit test 406 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x)(display"dictionary: unit test 407 failing\n"))
    (if(not(equal? "zab"  (car x)))(display"dictionary: unit test 408 failing\n"))
    (if(not (= 900 (cdr x)))(display"dictionary: unit test 409 failing\n")))
  ;; ninth delete
  ((a 'delete!) 9)
  ((b 'delete!) "zab")
  (if (not(a 'check))(display"dictionary: unit test 410 failing\n"))
  (if (not(b 'check))(display"dictionary: unit test 411 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 9)))(display"dictionary: unit test 412 failing\n"))
  (if(not(eq? #f ((b 'find) "zab")))(display"dictionary: unit test 413 failing\n"))
  ;;
  ;; multiple inserts
  (let loop ((i 512))
    (if (> i 0)
      (begin
        ((a 'insert!) i (* i 10))
        (if (not (a 'check))(display"dictionary: unit test 414 failing\n"))
        (let loop2 ((j 512))
          (if (> j i)
            (begin
              (let ((x ((a 'find) j)))
                (if (eq? #f x) (display"dictionary: unit test 415 failing\n"))
                (if (not (equal? j (car x)))
                  (display "dictionary: unit test 416 failing\n"))
                (if (not (= (* j 10) (cdr x)))
                  (display "dictionary: unit test 416 failing\n")))
              (loop2 (- j 1)))))
        (loop (- i 1)))))
  ;; multiple deletes
  (let loop ((i 512))
    (if (> i 0)
      (begin
        ((a 'delete!) i)
        (if (not (a 'check))(display"dictionary: unit test 417 failing\n"))
        (let loop2 ((j 512))
          (if (> j i)
            (begin
              (let ((x ((a 'find) j)))
                (if (not (eq? #f x))
                  (display "dictionary: unit test 418 failing\n")))
              (loop2 (- j 1)))))
        (loop (- i 1)))))

;  (a 'debug)
;  (b 'debug)
  ;;
  (display"dictionary: unit test complete\n"))

(dict-test)
(quit)

