we want to get rid of operands.scm
need to decide whether the body of an eval-procedure should be a list of 
expresssion, or a single 'begin' expression. The latter is seemingly preferrable
as it means dependency to 'eval-sequence' only occurs in begin.scm file.

begin.scm
lambda.scm
operands.scm
eval-procedure.scm
analyze-procedure.scm




continue rewriting code so as to keep parallel between 'eval' and 'analyze' (lambda !!!!)

Understand the suble differences between:
  - apply
  - apply-in-underlying-scheme
  - apply-primitive

follow up on debug.scm

repl.scm is broken
continue unit testing of analyze

introduce parallel between apply and eval, in relation to eval-in-underlying-scheme
deal with issue of whether eval takes 1 or 2 arguments

Understand rational for inluding components within components

change semantics of apply

understand the following:
exp = '(define f (lambda () 12))
((analyze exp) global-env) ; creating binding through analyze
(eval (f) global-env) ; this will fail

