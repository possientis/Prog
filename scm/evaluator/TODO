continue cond.scm
continue rewriting code so as to keep parallel between 'eval' and 'analyze' (lambda !!!!)

Understand the suble differences between:
  - apply
  - apply-in-underlying-scheme
  - apply-primitive

follow up on debug.scm

repl.scm is broken
check semantics of '() vs ()
continue unit testing of analyze

introduce parallel between apply and eval, in relation to eval-in-underlying-scheme
deal with issue of whether eval takes 1 or 2 arguments

Understand rational for inluding components within components

change semantics of apply

understand the following:
exp = '(define f (lambda () 12))
((analyze exp) global-env) ; creating binding through analyze
(eval (f) global-env) ; this will fail

