; code to be run by the unit test

(load "main.scm")
;(load "analyze-procedure.scm")
;(load "analyze.scm")
;(load "and.scm")
;(load "application.scm")
;(load "apply-in-underlying-scheme.scm")
;(Load "apply-primitive.scm")
;(load "apply.scm")
;(load "assignment.scm")
;(load "begin.scm")
;(load "cond.scm")
;(load "defined-primitive.scm")
;(load "defined.scm")
;(load "definition.scm")
;(load "dictionary-test.scm")
;(load "dict.scm")
;(load "environment1.scm")
;(load "environment.scm")
;(load "environment-test.scm")
;(load "eval-procedure.scm")
;(load "eval-primitive.scm")
;(load "frame.scm")
(load "frame1.scm")
(display "frame1 = ")(display frame1)(newline)
(display "global-env = ")(display (global-env 'to-string))(newline)
;(load "frame2.scm")
;(load "frame3.scm")
(load "frame-test.scm")
;(load "hash.scm")
;(load "link.scm")
;(load "link-node.scm")
;(load "load-primitive.scm")
;(load "object-string-primitive.scm")
;(load "primitive.scm")
;(load "primitive-procedure.scm")
;(load "require-primitive.scm")
;(load "tagged-list.scm")
;(load "unspecified.scm")
;(load "global-env.scm")
;(load "eval.scm")
;(load "true-false.scm")
;(load "if.scm")
;(load "lambda.scm")
;(load "let.scm")
;(load "let-star.scm")
;(load "named-let.scm")
;(load "let-rec.scm")
;(load "not.scm")
;(load "or.scm")
;(load "quote.scm")
;(load "self-evaluating.scm")
;(load "variable.scm")



