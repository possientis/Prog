(load "global-env.scm")
(load "exp-type.scm")
(load "operands.scm")
(load "variable.scm")
(load "quote.scm")
(load "assignment.scm")
(load "definition.scm")
(load "if.scm")
(load "not.scm")
(load "lambda.scm")
(load "begin.scm")
(load "cond.scm")
(load "or.scm")
(load "and.scm")
(load "let.scm")
(load "named-let.scm")
(load "let-star.scm")
(load "apply.scm")

(define DEBUG #f)

(define (eval exp env)
  (display "eval:\texp = ")(display exp)
  (display "\tenv = ")(display (env 'to-string))(newline)
  (cond ((self-evaluating? exp) exp)                            
        ((variable? exp) ((env 'lookup) exp))
        ((quoted? exp) (text-of-quotation exp))                 
        ((assignment? exp) (eval-assignment exp env))           
        ((definition? exp) (eval-definition exp env))           
        ((if? exp) (eval-if exp env))                           
        ((not? exp) (eval-not exp env))
        ((lambda? exp)(make-procedure(lambda-params exp)(lambda-body exp)env))
        ((begin? exp) (eval-sequence (begin-actions exp) env))  
        ((cond? exp) (eval (cond->if exp) env))              
        ((or? exp) (eval (or->if exp) env))
        ((and? exp) (eval (and->if exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((named-let? exp) (eval (named-let->combination exp) env))
        ((let*? exp) (eval (let*->nested-lets exp) env))
        ((application? exp)(apply (eval (exp-operator exp) env)
                                  (list-of-values (exp-operands exp) env)))        
        (else  (error "Unknown expression type -- EVAL" exp))))
       

