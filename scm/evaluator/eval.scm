;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; include guard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if (not (defined? included-eval)) 
  (begin
    (define included-eval #f)
    (display "loading eval")(newline)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

(load "global-env.scm")
(load "operands.scm")
(load "self-evaluating.scm")
(load "variable.scm")
(load "quote.scm")
(load "assignment.scm")
(load "definition.scm")
(load "defined.scm")
(load "if.scm")
(load "not.scm")

(load "application.scm")
(load "lambda.scm")
(load "begin.scm")
(load "cond.scm")
(load "or.scm")
(load "and.scm")
(load "let.scm")
(load "named-let.scm")
(load "let-star.scm")
(load "let-rec.scm")
(load "apply.scm")


(define (eval exp env)
;  (newline)(display "eval:\texp = ")(display exp)(newline)(newline)
;  (display "env = ")(display (env 'to-string))(newline)
;  (newline)(newline)(display "type ()+<Enter>")(read)(newline)(newline)
  (cond ((self-evaluating? exp) (eval-self-evaluating exp env))                 
        ((variable? exp) (eval-variable exp env))
        ((quoted? exp) (eval-quoted exp env))                 
        ((assignment? exp) (eval-assignment exp env))           
        ((definition? exp) (eval-definition exp env))           
        ((is-defined? exp)(eval-defined? exp env))
        ((if? exp) (eval-if exp env))                           
        ((not? exp) (eval-not exp env))
        ((lambda? exp)(eval-lambda exp env))
        ((begin? exp) (eval-sequence (begin-actions exp) env))  
        ((cond? exp) (eval (cond->if exp) env))              
        ((or? exp) (eval (or->if exp) env))
        ((and? exp) (eval (and->if exp) env))
        ((let? exp) (eval (let->combination exp) env))
        ((named-let? exp) (eval (named-let->combination exp) env))
        ((let*? exp) (eval (let*->nested-lets exp) env))
        ((letrec? exp) (eval (letrec->combination exp) env))
        ((application? exp) (eval-application exp env))
        (else  (error "Unknown expression type -- EVAL" exp))))
       

))  ; include guard.
