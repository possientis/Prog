;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; include guard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if (not (defined? included-primitive)) 
  (begin
    (define included-primitive #f)
    (display "loading primitive")(newline)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

(load "new-eval.scm")
(load "new-apply.scm")
(load "new-load.scm")
(load "new-require.scm")
(load "new-object-to-string.scm")
(load "new-map.scm")
(load "new-display.scm")

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'caar caar)
        (list 'caadr caadr)
        (list 'cdar cdar)
        (list 'cdadr cdadr)
        (list 'cadr cadr)
        (list 'caddr caddr)
        (list 'cadddr cadddr)
        (list 'cddr cddr)
        (list 'cdddr cdddr)
        (list 'cons cons)
        (list 'set-car! set-car!)
        (list 'set-cdr! set-cdr!)
        (list 'list list)
        (list 'append append)
        (list 'map new-map)
        (list 'null? null?)
        (list 'number? number?)
        (list 'string? string?)
        (list 'char? char?)
        (list 'boolean? boolean?)
        (list 'symbol? symbol?)
        (list 'pair? pair?)
        (list '+ +)
        (list '* *)
        (list '- -)
        (list '/ /)
        (list '= =)
        (list '< <)
        (list '> >)
        (list '<= <=)
        (list '>= >=)
        (list 'modulo modulo)
        (list 'equal? equal?)
        (list 'eq?    eq?)
        (list 'display new-display)
        (list 'newline newline)
        (list 'load    new-load)
        (list 'inexact->exact inexact->exact)
        (list 'number->string number->string)
        (list 'hash hash)
        (list 'require new-require)
        (list 'eval new-eval)
        (list 'apply new-apply)
        (list 'make-vector make-vector)
        (list 'vector-fill! vector-fill!)
        (list 'vector-length vector-length)
        (list 'vector-ref vector-ref)
        (list 'vector-set! vector-set!)
        (list 'string-append string-append)
        (list 'length length)
        (list 'object->string new-object->string)
        (list 'read read)
        (list 'open-file open-file)
        (list 'eof-object? eof-object?)
        (list 'close-port close-port)
        (list 'exit (lambda(x) 'ok))
        (list 'error error)
        ; more to be included
        ))
(define (primitive-procedure-names) (map car primitive-procedures))

(define (primitive-procedure-objects)
  (map (lambda (proc) (make-primitive-procedure (cadr proc))) 
       primitive-procedures))

))  ; include guard 
