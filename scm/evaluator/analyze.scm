;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; include guard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if (not (defined? included-analyze)) 
  (begin
    (define included-analyze #f)
    (display "loading analyze")(newline)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

(load "global-env.scm")
(load "operands.scm")
(load "self-evaluating.scm")
(load "variable.scm")
(load "assignment.scm")
(load "definition.scm")
(load "if.scm")
(load "not.scm")
(load "lambda.scm")
(load "begin.scm")
(load "cond.scm")
(load "or.scm")
(load "and.scm")
(load "let.scm")
(load "named-let.scm")
(load "let-star.scm")
(load "let-rec.scm")
(load "apply.scm")

(define (analyze exp)
  (cond ((self-evaluating? exp) (analyze-self-evaluating exp))                
        ((variable? exp) (analyze-variable exp))
        ((quoted? exp) (analyze-quoted exp))                
        ((assignment? exp) (analyze-assignment exp))          
        ((definition? exp) (analyze-definition exp))           
        ((is-defined? exp) (analyze-defined? exp))
        ((if? exp) (analyze-if exp))                           
        ((not? exp) (analyze-not exp))
        ((lambda? exp)(analyze-lambda exp))
        ((begin? exp) (analyze-sequence (begin-actions exp))) 
        ((cond? exp) (analyze (cond->if exp)))              
        ((or? exp) (analyze (or->if exp)))
        ((and? exp) (analyze (and->if exp)))
        ((let? exp) (analyze (let->combination exp)))
        ((named-let? exp) (analyze (named-let->combination exp)))
        ((let*? exp) (analyze (let*->nested-lets exp)))
        ((letrec? exp) (analyze (letrec->combination exp)))
        ((application? exp) (analyze-application exp))   
        (else  (error "Unknown expression type -- ANALYSE" exp))))


))  ; include guard
