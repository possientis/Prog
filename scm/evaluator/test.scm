(define x 5)
(define y 6)
(define z (+ x y))
; this is a comment
;(display "z = ")
;(display z)
;(newline)
(load "make.scm")
(load "and.scm")
(load "assignment.scm")
(load "begin.scm")
(load "compound.scm")
(load "operands.scm")
(load "cond.scm")
(load "definition.scm")
(load "hash.scm")
(load "link-node.scm")
(load "link.scm")
(load "dict.scm")
(load "dictionary-test.scm")
(load "frame1.scm")
(load "frame2.scm")
(load "frame3.scm")
(load "frame.scm")
(load "environment1.scm")
(load "environment.scm")
(load "environment-test.scm")
(load "frame-test.scm")
(load "apply.scm")
(load "eval-primitive.scm")
(Load "apply-primitive.scm")
(load "require.scm")
(load "load-file.scm")
(load "object-string.scm")
(load "primitive.scm")
(load "global-env.scm")
(load "eval.scm")
(load "exp-type.scm")
(load "true-false.scm")
(load "if.scm")
(load "lambda.scm")
(load "let.scm")
(load "let-star.scm")
(load "named-let.scm")
(load "let-rec.scm")
(load "not.scm")
(load "or.scm")
(load "quote.scm")
(load "variable.scm")



