#!/usr/bin/scm
(load "stream.scm")

(define (stream-test)
  ;
  (define ones (stream-cons 1 ones))
  (define (sieve s)
    (stream-cons 
      (s 'car)
      (sieve (stream-filter
               (lambda (x) (not (= 0 (modulo x (s 'car)))))
               (s 'cdr)))))
  
  (display "stream: starting unit test\n")
  ; empty stream
  (let ((s (stream)))
    (if (not (s 'null?)) (display "stream: unit test 1.0 failing\n"))
    (if (not (equal? (stream->list s) '()))
      (display "stream: unit test 1.1 failing\n"))
    (if (not (equal? (stream-take 10 s) '()))
      (display "stream: unit test 1.2 failing\n"))
    (if (not ((list->stream '()) 'null?))
      (display "stream: unit test 1.3 failing\n")))
  ; one elment stream
  (let ((s (stream-cons 5 (stream)))) ; s = (5)
    ; stream should not be empty
    (if (s 'null?) (display "stream: unit test 2.0 failing\n"))
    ; checking car
    (if (not (= 5 (s 'car))) (display "stream: unit test 2.1 failing\n"))
    (if (not ((s 'cdr) 'null?)) (display "stream: unit test 2.2 failing\n"))
    (if (not (= 5 (stream-ref s 0))) (display "stream: unit test 2.3 failing\n"))
    (if (not (equal? (stream->list s) '(5)))
      (display "stream: unit test 2.4 failing\n"))
    (if (not (equal? (stream-take 1 s) '(5)))
      (display "stream: unit test 2.5 failing\n")))
  ; two element stream
  (let ((s (list->stream '(5 7))))
    (if (s 'null?) (display "stream: unit test 3.0 failing\n"))
    (if (not (= 5 (stream-ref s 0))) (display "stream: unit test 3.1 failing\n"))
    (if (not (= 7 (stream-ref s 1))) (display "stream: unit test 3.2 failing\n"))
    (if (not (equal? (stream->list s) '(5 7)))
      (display "stream: unit test 3.3 failing\n"))
    (if (not (equal? (stream-take 2 s) '(5 7)))
      (display "stream: unit test 3.4 failing\n")))
  ; more elements
  (let ((s (list->stream '(5 7 3 2 0 1 4 8))))
    (if (s 'null?) (display "stream: unit test 4.0 failing\n"))
    (if (not (= 5 (stream-ref s 0))) (display "stream: unit test 4.1 failing\n"))
    (if (not (= 7 (stream-ref s 1))) (display "stream: unit test 4.2 failing\n"))
    (if (not (= 3 (stream-ref s 2))) (display "stream: unit test 4.3 failing\n"))
    (if (not (= 2 (stream-ref s 3))) (display "stream: unit test 4.4 failing\n"))
    (if (not (= 0 (stream-ref s 4))) (display "stream: unit test 4.5 failing\n"))
    (if (not (= 1 (stream-ref s 5))) (display "stream: unit test 4.6 failing\n"))
    (if (not (= 4 (stream-ref s 6))) (display "stream: unit test 4.7 failing\n"))
    (if (not (= 8 (stream-ref s 7))) (display "stream: unit test 4.8 failing\n"))
    (if (not (equal? (stream->list s) '(5 7 3 2 0 1 4 8)))
      (display "stream: unit test 4.9 failing\n"))
    (if (not (equal? (stream-take 8 s) '(5 7 3 2 0 1 4 8)))
      (display "stream: unit test 4.10 failing\n")))
  ; some infinite streams (need recursive 'let' though, or will fail)
  (letrec ((s (stream-cons 1 s)))  ; s = (1 1 1 1 1 1 1 1 1 1 .....
    (if (s 'null?) (display "stream: unit test 5.0 failing\n"))
    (if (not (= 1 (stream-ref s 0))) (display "stream: unit test 5.1 failing\n"))
    (if (not (= 1 (stream-ref s 1))) (display "stream: unit test 5.2 failing\n"))
    (if (not (= 1 (stream-ref s 2))) (display "stream: unit test 5.3 failing\n"))
    (if (not (= 1 (stream-ref s 3))) (display "stream: unit test 5.4 failing\n"))
    (if (not (= 1 (stream-ref s 4))) (display "stream: unit test 5.5 failing\n"))
    (if (not (= 1 (stream-ref s 5))) (display "stream: unit test 5.6 failing\n"))
    (if (not (= 1 (stream-ref s 6))) (display "stream: unit test 5.7 failing\n"))
    (if (not (= 1 (stream-ref s 7))) (display "stream: unit test 5.8 failing\n"))
    (if (not (equal? (stream-take 8 s) '(1 1 1 1 1 1 1 1)))
      (display "stream: unit test 5.9 failing\n"))
    (if (not (equal? (stream-take 8 ones) '(1 1 1 1 1 1 1 1)))
      (display "stream: unit test 5.10 failing\n")))
  ; stream-for-each
  (let ((s (list->stream '(0 1 2 3 4 5)))
        (f (let ((count 0))
             (lambda (x)
               (set! count (+ count x))
               count))))
    (stream-for-each f s) ; internal 'count' should reach 15
    (if (not (= 15 (f 0))) (display "stream: unit test 7.0 failing\n")))
  ; integers-from
  (let ((s (integers-from 17)))
    (if (not (equal? (stream-take 8 s) '(17 18 19 20 21 22 23 24)))
      (display "stream: unit test 8.0 failing\n")))
  ; stream-filter
  (let ((s (integers-from 0)))
    (let ((s1 (stream-filter odd? s)) (s2 (stream-filter even? s)))
    (if (not (equal? (stream-take 8 s1) '(1 3 5 7 9 11 13 15)))
      (display "stream: unit test 9.0 failing\n"))
    (if (not (equal? (stream-take 8 s2) '(0 2 4 6 8 10 12 14)))
      (display "stream: unit test 9.1 failing\n"))))
  ; stream-map
  ; n = 0
  (let ((f (lambda (x) (* x x))))
    (let ((t (stream-map f)))
      (if (not (t 'null?)) (display "stream: unit test 10.0 failing\n"))))
  ; n = 1
  (let ((s (list->stream '(0 1 2 3 4 5))) (f (lambda (x) (* x x))))
    (let ((t (stream-map f s)))
      (if (not (equal? (stream->list t) '(0 1 4 9 16 25)))
        (display "stream: unit test 10.1 failing\n"))))
  (if (not ((stream-map (lambda (x) (* x x)) (stream)) 'null?))
    (display "stream: unit test 10.2 failing\n"))
  ; n = 2
  (let ((s1 (list->stream '(0 1 2 3 4 5)))
        (s2 (list->stream '(2 4 6 8 9 7))))
    (let ((t (stream-map + s1 s2)))
      (if (not (equal? (stream->list t) '(2 5 8 11 13 12)))
        (display "stream: unit test 10.3 failing\n"))))
  (let ((t (stream-map + ones ones)))
    (if (not (equal? (stream-take 10 t) '(2 2 2 2 2 2 2 2 2 2)))
      (display "stream: unit test 10.4 failing\n")))
  ; n = 3
  (let ((s1 (list->stream '(0 1 2 3 4 5)))
        (s2 (list->stream '(2 4 6 8 9 7)))
        (s3 (list->stream '(5 1 2 3 6 1))))
    (let ((t (stream-map + s1 s2 s3)))
      (if (not (equal? (stream->list t) '(7 6 10 14 19 13)))
        (display "stream: unit test 10.3 failing\n"))))
  ; fibonacci numbers
  (let ((seq (stream-take 10 fibs1)))
    (if (not (equal? seq '(0 1 1 2 3 5 8 13 21 34)))
      (display "stream: unit test 11.0 failing\n")))
  (let ((seq (stream-take 10 fibs2)))
    (if (not (equal? seq '(0 1 1 2 3 5 8 13 21 34)))
      (display "stream: unit test 11.1 failing\n")))
  ; primes
  (let ((primes (sieve (integers-from 2))))
    (let ((seq (stream-take 200 primes))) ; fails around 800 (stack overflow?)
      (if (not (= 2 (car seq))) (display "stream: unit test 12 failing\n"))))
  ;
  (display "stream: unit test complete\n"))

(stream-test)
(exit 0)
