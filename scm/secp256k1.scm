(require 'printf)

; exponentiation
; fast and stack friendly but no modulo 
(define (^ a n)
  (let loop ((a a) (n n) (prod 1))
    (cond ((= n 0) prod)
          ((even? n) (loop (* a a) (/ n 2) prod))
          ((odd? n) (loop a (- n 1) (* a prod)))
          (else (display "^: unexpected argument\n")))))

; elliptic curve over Fp where:
(define p 
  115792089237316195423570985008687907853269984665640564039457584007908834671663)

; equation 
; y^2 mod p = (x^3 + 7) mod p

; base point
; 79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798
; 79be667e f9dcbbac 55a06295 ce870b07 029bfcdb 2dce28d9 59f2815b 16f81798
(define x 
  55066263022277343669578718895168534326250603453777594175500187360389116729240)
; 483ADA77 26A3C465 5DA4FBFC 0E1108A8 FD17B448 A6855419 9C47D08F FB10D4B8
; 483ada77 26a3c465 5da4fbfc 0e1108a8 fd17b448 a6855419 9c47d08f fb10d4b8
(define y 
  32670510020758816978083085130507043184471273380659243275938904335757337482424)

; order of the base point
; cofactor h is 1. h*order = #E(Fp). So guessing this means the cardinal 
; of the elliptic curve is exactly 'order'. This should mean that as a group,
; the elliptic curve is generated by the base point.
;
; FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141
; ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141
(define order 
  115792089237316195423570985008687907852837564279074904382605163141518161494337)

; checking that (x,y) is a point of secp256k1
(define a (+ 7 (^ x 3)))
(define b (^ y 2))
(define c (- a b))
(define d (modulo c p))
(if (not (= 0 d)) (error "(x,y) is not a point of secp256k1"))

; checking p = 2^256 - 0X1000003D1
(define q1 (^ 2 256))
(define q2 (- q1 (^ 2 32)))
(define q3 (- q2 (^ 2 9)))
(define q4 (- q3 (^ 2 8)))
(define q5 (- q4 (^ 2 7)))
(define q6 (- q5 (^ 2 6)))
(define q7 (- q6 16))
(define q (- q7 1))
(if (not (= q p)) (error "prime humber p is unexpected"))

;(printf "%x\n" x)
;(printf "%x\n" y)
;(printf "%x\n" order)



