(load "dict.scm")

(define (same-key? x y) (equal? x y))

(define (dict-test)
  ;;
  (define a (dictionary same-key?))
  (define b (dictionary equal?))
  ;;
  (display "dictionary starting unit test\n")
  ;; first insert
  ((a 'insert!) 1 10)
  ((b 'insert!) "abc" 100)
  (if(not (a 'check)) (display "dictionary unit test 1.1 failing\n"))
  (if(not (b 'check)) (display "dictionary unit test 1.2 failing\n"))
  ;; should fail
  (if(not (eq? #f ((a 'find) 0))) (display "dictionary unit test 1 failing\n"))
  (if(not (eq? #f ((b 'find) "abd"))) (display "dictionary unit test 2 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x) (display "dictionary unit test 3 failing\n"))
    (if (not (same-key? 1 (car x))) (display "dictionary unit test 4 failing\n"))
    (if (not (= 10 (cdr x))) (display "dictionary unit test 5 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if (eq? #f x) (display "dictionary unit test 6 failing\n"))
    (if (not (equal? "abc"  (car x))) (display "dictionary unit test 7 failing\n"))
    (if (not (= 100 (cdr x))) (display "dictionary unit test 8 failing\n")))
  ;; second insert
  ((a 'insert!) 2 20)
  ((b 'insert!) "def" 200)
  (if(not(a 'check)) (display "dictionary unit test 8.1 failing\n"))
  (if(not(b 'check)) (display "dictionary unit test 8.2 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0))) (display "dictionary unit test 9 failing\n"))
  (if(not(eq? #f ((b 'find) "abd"))) (display "dictionary unit test 10 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x) (display "dictionary unit test 11 failing\n"))
    (if (not (same-key? 1 (car x))) (display "dictionary unit test 12 failing\n"))
    (if (not (= 10 (cdr x))) (display "dictionary unit test 13 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x) (display "dictionary unit test 14 failing\n"))
    (if(not (equal? "abc"  (car x))) (display "dictionary unit test 15 failing\n"))
    (if (not (= 100 (cdr x))) (display "dictionary unit test 16 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x) (display "dictionary unit test 17 failing\n"))
    (if (not (same-key? 2 (car x))) (display "dictionary unit test 18 failing\n"))
    (if (not (= 20 (cdr x))) (display "dictionary unit test 19 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x) (display "dictionary unit test 20 failing\n"))
    (if(not (equal? "def"  (car x))) (display "dictionary unit test 21 failing\n"))
    (if (not (= 200 (cdr x))) (display "dictionary unit test 22 failing\n")))
  ;; third insert
  ((a 'insert!) 3 30)
  ((b 'insert!) "hij" 300)
  (if (not(a 'check)) (display "dictionary unit test 23 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 24 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0))) (display "dictionary unit test 25 failing\n"))
  (if(not(eq? #f ((b 'find) "abd"))) (display "dictionary unit test 26 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x) (display "dictionary unit test 27 failing\n"))
    (if (not (same-key? 1 (car x))) (display "dictionary unit test 28 failing\n"))
    (if (not (= 10 (cdr x))) (display "dictionary unit test 29 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x) (display "dictionary unit test 30 failing\n"))
    (if(not (equal? "abc"  (car x))) (display "dictionary unit test 31 failing\n"))
    (if (not (= 100 (cdr x))) (display "dictionary unit test 32 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x) (display "dictionary unit test 33 failing\n"))
    (if (not (same-key? 2 (car x))) (display "dictionary unit test 34 failing\n"))
    (if (not (= 20 (cdr x))) (display "dictionary unit test 35 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x) (display "dictionary unit test 36 failing\n"))
    (if(not (equal? "def"  (car x))) (display "dictionary unit test 37 failing\n"))
    (if(not (= 200 (cdr x))) (display "dictionary unit test 38 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x) (display "dictionary unit test 39 failing\n"))
    (if (not (same-key? 3 (car x))) (display "dictionary unit test 40 failing\n"))
    (if (not (= 30 (cdr x))) (display "dictionary unit test 41 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x) (display "dictionary unit test 42 failing\n"))
    (if(not (equal? "hij"  (car x))) (display "dictionary unit test 43 failing\n"))
    (if(not (= 300 (cdr x))) (display "dictionary unit test 44 failing\n")))
  ;; fourth insert
  ((a 'insert!) 4 40)
  ((b 'insert!) "klm" 400)
  (if (not(a 'check)) (display "dictionary unit test 45 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 46 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0))) (display "dictionary unit test 47 failing\n"))
  (if(not(eq? #f ((b 'find) "abd"))) (display "dictionary unit test 48 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x) (display "dictionary unit test 49 failing\n"))
    (if (not (same-key? 1 (car x))) (display "dictionary unit test 50 failing\n"))
    (if (not (= 10 (cdr x))) (display "dictionary unit test 51 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x) (display "dictionary unit test 52 failing\n"))
    (if(not (equal? "abc"  (car x))) (display "dictionary unit test 53 failing\n"))
    (if (not (= 100 (cdr x))) (display "dictionary unit test 54 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x) (display "dictionary unit test 55 failing\n"))
    (if (not (same-key? 2 (car x))) (display "dictionary unit test 56 failing\n"))
    (if (not (= 20 (cdr x))) (display "dictionary unit test 57 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x) (display "dictionary unit test 58 failing\n"))
    (if(not (equal? "def"  (car x))) (display "dictionary unit test 59 failing\n"))
    (if(not (= 200 (cdr x))) (display "dictionary unit test 60 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x) (display "dictionary unit test 61 failing\n"))
    (if (not (same-key? 3 (car x))) (display "dictionary unit test 62 failing\n"))
    (if (not (= 30 (cdr x))) (display "dictionary unit test 63 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x) (display "dictionary unit test 64 failing\n"))
    (if(not (equal? "hij"  (car x))) (display "dictionary unit test 65 failing\n"))
    (if(not (= 300 (cdr x))) (display "dictionary unit test 66 failing\n")))
  (let ((x ((a 'find) 4)))
    (if (eq? #f x) (display "dictionary unit test 67 failing\n"))
    (if (not (same-key? 4 (car x))) (display "dictionary unit test 68 failing\n"))
    (if (not (= 40 (cdr x))) (display "dictionary unit test 69 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x) (display "dictionary unit test 70 failing\n"))
    (if(not (equal? "klm"  (car x))) (display "dictionary unit test 71 failing\n"))
    (if(not (= 400 (cdr x))) (display "dictionary unit test 72 failing\n")))
  ;; fifth insert
  ((a 'insert!) 5 50)
  ((b 'insert!) "nop" 500)
  (if (not(a 'check)) (display "dictionary unit test 73 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 74 failing\n"))
  ;; should fail
  (if(not(eq? #f ((a 'find) 0))) (display "dictionary unit test 75 failing\n"))
  (if(not(eq? #f ((b 'find) "abd"))) (display "dictionary unit test 76 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 1)))
    (if (eq? #f x) (display "dictionary unit test 77 failing\n"))
    (if (not (same-key? 1 (car x))) (display "dictionary unit test 78 failing\n"))
    (if (not (= 10 (cdr x))) (display "dictionary unit test 79 failing\n")))
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x) (display "dictionary unit test 80 failing\n"))
    (if(not (equal? "abc"  (car x))) (display "dictionary unit test 81 failing\n"))
    (if (not (= 100 (cdr x))) (display "dictionary unit test 82 failing\n")))
  (let ((x ((a 'find) 2)))
    (if (eq? #f x) (display "dictionary unit test 83 failing\n"))
    (if (not (same-key? 2 (car x))) (display "dictionary unit test 84 failing\n"))
    (if (not (= 20 (cdr x))) (display "dictionary unit test 85 failing\n")))
  (let ((x ((b 'find) "def")))
    (if(eq? #f x) (display "dictionary unit test 86 failing\n"))
    (if(not (equal? "def"  (car x))) (display "dictionary unit test 87 failing\n"))
    (if(not (= 200 (cdr x))) (display "dictionary unit test 88 failing\n")))
  (let ((x ((a 'find) 3)))
    (if (eq? #f x) (display "dictionary unit test 89 failing\n"))
    (if (not (same-key? 3 (car x))) (display "dictionary unit test 90 failing\n"))
    (if (not (= 30 (cdr x))) (display "dictionary unit test 91 failing\n")))
  (let ((x ((b 'find) "hij")))
    (if(eq? #f x) (display "dictionary unit test 92 failing\n"))
    (if(not (equal? "hij"  (car x))) (display "dictionary unit test 93 failing\n"))
    (if(not (= 300 (cdr x))) (display "dictionary unit test 94 failing\n")))
  (let ((x ((a 'find) 4)))
    (if (eq? #f x) (display "dictionary unit test 95 failing\n"))
    (if (not (same-key? 4 (car x))) (display "dictionary unit test 96 failing\n"))
    (if (not (= 40 (cdr x))) (display "dictionary unit test 97 failing\n")))
  (let ((x ((b 'find) "klm")))
    (if(eq? #f x) (display "dictionary unit test 98 failing\n"))
    (if(not (equal? "klm"  (car x))) (display "dictionary unit test 99 failing\n"))
    (if(not (= 400 (cdr x))) (display "dictionary unit test 100 failing\n")))
  (let ((x ((a 'find) 5)))
    (if (eq? #f x) (display "dictionary unit test 101 failing\n"))
    (if (not (same-key? 5 (car x))) (display "dictionary unit test 102 failing\n"))
    (if (not (= 50 (cdr x))) (display "dictionary unit test 103 failing\n")))
  (let ((x ((b 'find) "nop")))
    (if(eq? #f x) (display "dictionary unit test 104 failing\n"))
    (if(not(equal? "nop"  (car x)))(display "dictionary unit test 105 failing\n"))
    (if(not (= 500 (cdr x))) (display "dictionary unit test 106 failing\n")))
  ;; sixth insert (partial find checks)
  ((a 'insert!) 6 60)
  ((b 'insert!) "qrs" 600)
  (if (not(a 'check)) (display "dictionary unit test 107 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 108 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 6)))
    (if (eq? #f x) (display "dictionary unit test 109 failing\n"))
    (if (not (same-key? 6 (car x))) (display "dictionary unit test 110 failing\n"))
    (if (not (= 60 (cdr x))) (display "dictionary unit test 111 failing\n")))
  (let ((x ((b 'find) "qrs")))
    (if(eq? #f x) (display "dictionary unit test 112 failing\n"))
    (if(not(equal? "qrs"  (car x)))(display "dictionary unit test 113 failing\n"))
    (if (not (= 600 (cdr x)))(display "dictionary unit test 114 failing\n")))
  ;; extra test: turns out there is a collision here on scm
  (let ((x ((b 'find) "abc")))
    (if(eq? #f x) (display "dictionary unit test 115 failing\n"))
    (if(not(equal? "abc"  (car x)))(display "dictionary unit test 116 failing\n"))
    (if (not (= 100 (cdr x)))(display "dictionary unit test 117 failing\n")))
  ;; seventh insert (partial find checks)
  ((a 'insert!) 7 70)
  ((b 'insert!) "tuv" 700)
  (if (not(a 'check)) (display "dictionary unit test 118 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 119 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 7)))
    (if (eq? #f x) (display "dictionary unit test 120 failing\n"))
    (if (not (same-key? 7 (car x))) (display "dictionary unit test 121 failing\n"))
    (if (not (= 70 (cdr x))) (display "dictionary unit test 122 failing\n")))
  (let ((x ((b 'find) "tuv")))
    (if(eq? #f x) (display "dictionary unit test 123 failing\n"))
    (if(not(equal? "tuv"  (car x)))(display "dictionary unit test 124 failing\n"))
    (if (not (= 700 (cdr x)))(display "dictionary unit test 125 failing\n")))
  ;; eigth insert (partial find checks)
  ((a 'insert!) 8 80)
  ((b 'insert!) "wxy" 800)
  (if (not(a 'check)) (display "dictionary unit test 126 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 127 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 8)))
    (if (eq? #f x) (display "dictionary unit test 128 failing\n"))
    (if (not (same-key? 8 (car x))) (display "dictionary unit test 129 failing\n"))
    (if (not (= 80 (cdr x))) (display "dictionary unit test 130 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x) (display "dictionary unit test 131 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display "dictionary unit test 132 failing\n"))
    (if (not (= 800 (cdr x)))(display "dictionary unit test 133 failing\n")))
  ;; eigth insert (partial find checks)
  ((a 'insert!) 8 80)
  ((b 'insert!) "wxy" 800)
  (if (not(a 'check)) (display "dictionary unit test 126 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 127 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 8)))
    (if (eq? #f x) (display "dictionary unit test 128 failing\n"))
    (if (not (same-key? 8 (car x))) (display "dictionary unit test 129 failing\n"))
    (if (not (= 80 (cdr x))) (display "dictionary unit test 130 failing\n")))
  (let ((x ((b 'find) "wxy")))
    (if(eq? #f x) (display "dictionary unit test 131 failing\n"))
    (if(not(equal? "wxy"  (car x)))(display "dictionary unit test 132 failing\n"))
    (if (not (= 800 (cdr x)))(display "dictionary unit test 133 failing\n")))
  ;; ninth insert (partial find checks)
  ((a 'insert!) 9 90)
  ((b 'insert!) "zab" 900)
  (if (not(a 'check)) (display "dictionary unit test 134 failing\n"))
  (if (not(b 'check)) (display "dictionary unit test 135 failing\n"))
  ;; should succeed
  (let ((x ((a 'find) 9)))
    (if (eq? #f x) (display "dictionary unit test 136 failing\n"))
    (if (not (same-key? 9 (car x))) (display "dictionary unit test 137 failing\n"))
    (if (not (= 90 (cdr x))) (display "dictionary unit test 138 failing\n")))
  (let ((x ((b 'find) "zab")))
    (if(eq? #f x) (display "dictionary unit test 139 failing\n"))
    (if(not(equal? "zab"  (car x)))(display "dictionary unit test 140 failing\n"))
    (if (not (= 900 (cdr x)))(display "dictionary unit test 141 failing\n")))

  (a 'debug)
  (b 'debug)
  ;;
  (display "dictionary unit test complete\n"))

(dict-test)
(quit)

