(load "link.scm")

(define (link-test)

  (define a (link (lambda (x y) (equal? x y))))
  (define b (link equal?))

  (display "link: starting unit test\n")
  (if (not (a 'empty?)) (display "link: unit test 0.1 failing\n"))
  (if (not (b 'empty?)) (display "link: unit test 0.2 failing\n"))
  ;; insert
  ;; first insert
  ((a 'insert!) 1 10)
  ((b 'insert!) 2 20)
  (if (a 'empty?) (display "link: unit test 0.3 failing\n"))
  (if (b 'empty?) (display "link: unit test 0.4 failing\n"))
  (let ((x ((a 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 1 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 2 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 3 failing\n"))
          ((not (= 10(cdr x))) (display "link: unit test 4 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 5 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 6 failing\n"))
          ((not (= 20(cdr x))) (display "link: unit test 7 failing\n"))))
  ;; second insert
  ((a 'insert!) 3 30)
  ((b 'insert!) 3 30)
  (let ((x ((a 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 8 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 9 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 10 failing\n"))
          ((not (= 10(cdr x))) (display "link: unit test 11 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 12 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 13 failing\n"))
          ((not (= 20(cdr x))) (display "link: unit test 14 failing\n"))))
  (let ((x ((a 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 15 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 16 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 17 failing\n"))))
  (let ((x ((b 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 18 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 19 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 20 failing\n"))))
  ;; third insert (duplicate keys)
  ((a 'insert!) 1 100)
  ((b 'insert!) 2 200)
  (let ((x ((a 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 21 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 22 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 23 failing\n"))
          ((not (= 100(cdr x))) (display "link: unit test 24 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 25 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 26 failing\n"))
          ((not (= 200(cdr x))) (display "link: unit test 27 failing\n"))))
  (let ((x ((a 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 28 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 29 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 30 failing\n"))))
  (let ((x ((b 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 31 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 32 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 33 failing\n"))))
  ;; fourth insert
  ((a 'insert!) 5 50)
  ((b 'insert!) 5 50)
  (let ((x ((a 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 34 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 35 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 36 failing\n"))
          ((not (= 100(cdr x))) (display "link: unit test 37 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 38 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 39 failing\n"))
          ((not (= 200(cdr x))) (display "link: unit test 40 failing\n"))))
  (let ((x ((a 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 41 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 42 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 43 failing\n"))))
  (let ((x ((b 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 44 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 45 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 46 failing\n"))))
  (let ((x ((a 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 47 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 48 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 49 failing\n"))))
  (let ((x ((b 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 50 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 51 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 52 failing\n"))))
  ;; fifth insert
  ((a 'insert!) 8 80)
  ((b 'insert!) 8 80)
  (let ((x ((a 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 53 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 54 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 55 failing\n"))
          ((not (= 100(cdr x))) (display "link: unit test 56 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 57 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 58 failing\n"))
          ((not (= 200(cdr x))) (display "link: unit test 59 failing\n"))))
  (let ((x ((a 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 60 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 61 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 62 failing\n"))))
  (let ((x ((b 'find) 3)))
    (cond ((eq? x #f) (display "link: unit test 63 failing\n"))
          ((not (= 3 (car x))) (display "link: unit test 64 failing\n"))
          ((not (= 30(cdr x))) (display "link: unit test 65 failing\n"))))
  (let ((x ((a 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 66 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 67 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 68 failing\n"))))
  (let ((x ((b 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 69 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 70 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 71 failing\n"))))
  (let ((x ((a 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 72 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 73 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 74 failing\n"))))
  (let ((x ((b 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 75 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 76 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 77 failing\n"))))
  ;; delete
  ;; first delete
  ((a 'delete!) 3)
  ((b 'delete!) 3)
  (let ((x ((a 'find) 3)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 78 failing\n")))
  (let ((x ((b 'find) 3)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 79 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 80 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 81 failing\n"))
          ((not (= 100(cdr x))) (display "link: unit test 82 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 83 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 84 failing\n"))
          ((not (= 200(cdr x))) (display "link: unit test 85 failing\n"))))
 (let ((x ((a 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 86 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 87 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 88 failing\n"))))
  (let ((x ((b 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 89 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 90 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 91 failing\n"))))
  (let ((x ((a 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 92 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 93 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 94 failing\n"))))
  (let ((x ((b 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 95 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 96 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 97 failing\n"))))
  ;; second delete (deleting absent key)
  ((a 'delete!) 7)
  ((b 'delete!) 7)
  (let ((x ((a 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 98 failing\n")))
  (let ((x ((b 'find) 0)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 99 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 100 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 101 failing\n"))
          ((not (= 100(cdr x))) (display "link: unit test 102 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 103 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 104 failing\n"))
          ((not (= 200(cdr x))) (display "link: unit test 105 failing\n"))))
 (let ((x ((a 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 106 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 107 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 108 failing\n"))))
  (let ((x ((b 'find) 5)))
    (cond ((eq? x #f) (display "link: unit test 109 failing\n"))
          ((not (= 5 (car x))) (display "link: unit test 110 failing\n"))
          ((not (= 50(cdr x))) (display "link: unit test 111 failing\n"))))
  (let ((x ((a 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 112 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 113 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 114 failing\n"))))
  (let ((x ((b 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 115 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 116 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 117 failing\n"))))
  ;; third delete
  ((a 'delete!) 5)
  ((b 'delete!) 5)
  (let ((x ((a 'find) 5)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 118 failing\n")))
  (let ((x ((b 'find) 5)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 119 failing\n")))
  (let ((x ((a 'find) 1)))
    (cond ((eq? x #f) (display "link: unit test 120 failing\n"))
          ((not (= 1 (car x))) (display "link: unit test 121 failing\n"))
          ((not (= 100(cdr x))) (display "link: unit test 122 failing\n"))))
  (let ((x ((b 'find) 2)))
    (cond ((eq? x #f) (display "link: unit test 123 failing\n"))
          ((not (= 2 (car x))) (display "link: unit test 124 failing\n"))
          ((not (= 200(cdr x))) (display "link: unit test 125 failing\n"))))
 (let ((x ((a 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 126 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 127 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 128 failing\n"))))
  (let ((x ((b 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 129 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 130 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 131 failing\n"))))
  ;; fourth delete
  ((a 'delete!) 1)
  ((b 'delete!) 2)
  (let ((x ((a 'find) 1)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 132 failing\n")))
  (let ((x ((b 'find) 2)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 133 failing\n")))
(let ((x ((a 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 134 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 135 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 136 failing\n"))))
  (let ((x ((b 'find) 8)))
    (cond ((eq? x #f) (display "link: unit test 137 failing\n"))
          ((not (= 8 (car x))) (display "link: unit test 138 failing\n"))
          ((not (= 80(cdr x))) (display "link: unit test 139 failing\n"))))
  ;; fifth delete
  ((a 'delete!) 8)
  ((b 'delete!) 8)
  (let ((x ((a 'find) 8)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 140 failing\n")))
  (let ((x ((b 'find) 8)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 141 failing\n")))
  ;; sixth delete
  ((a 'delete!) 8)
  ((b 'delete!) 8)
  (let ((x ((a 'find) 8)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 142 failing\n")))
  (let ((x ((b 'find) 8)))  ; should fail
    (if (not (eq? #f x)) (display "link: unit test 143 failing\n")))
  ;;
  (if (not (a 'empty?)) (display "link: unit test 143.1 failing\n"))
  (if (not (b 'empty?)) (display "link: unit test 143.2 failing\n"))
  ;; multiple inserts
  (let loop ((n 512))
    (if (< n 1)
      'done
      (begin
        ((a 'insert!) n 23)
        (let ((x ((a 'find) n)))
          (cond ((eq? x #f) (display "link: unit test 144 failing\n"))
                ((not (= n (car x))) (display "link: unit test 145 failing\n"))
                ((not (= 23 (cdr x))) (display "link: unit test 146 failing\n"))))
        (loop (- n 1)))))
  ;; multiple delete
  (let loop ((n 1))
    (if (> n 512)
      'done
      (begin
        ((a 'delete!) n)
        (let ((x ((a 'find) n)))
          (if (not (eq? #f x)) (display "link: unit test 147 failing\n")))
        (loop (+ n 1)))))
  ;;
  (if (not (a 'empty?)) (display "link: unit test 147.1 failing\n"))
  (if (not (b 'empty?)) (display "link: unit test 147.2 failing\n"))
  ;;
  ;; iterator
  ((a 'insert!) 1 10)
  ((a 'insert!) 3 30)
  ((a 'insert!) 5 50)
  ((a 'insert!) 7 70)
  ;;
  (let loop ((iter (a 'iter)))
    (if (iter 'null?)
      'done
      (begin
        (let ((x ((a 'find) (iter 'key))))
          (if (eq? #f x) (display "link: unit test 148 failing\n"))
          (if(not(=(car x)(iter 'key)))(display "link: unit test 149 failing\n"))
          (if(not(=(cdr x)(iter 'value)))(display"link: unit test 150 failing\n")))
        (iter '++)
        (loop iter))))
  ;; new iter still working?
  (let loop ((iter (a 'iter)))
    (if (iter 'null?)
      'done
      (begin
        (let ((x ((a 'find) (iter 'key))))
          (if (eq? #f x) (display "link: unit test 151 failing\n"))
          (if(not(=(car x)(iter 'key)))(display "link: unit test 152 failing\n"))
          (if(not(=(cdr x)(iter 'value)))(display"link: unit test 153 failing\n")))
        (iter '++)
        (loop iter))))
  ;;
  ;; setting vector of 4 flags
  (let ((v (make-vector 4)))
    ;; initializing entries to #f
    (let loop ((i 0))
      (if (>= i 4)
        'done
        (begin
          (vector-set! v i #f)
          (set! i (+ 1 i))
          (loop i))))
    ;; looping through iterator, checking found keys
   (let loop ((iter (a 'iter)))
    (if (iter 'null?)
      'done
      (begin
        (cond ((= 1 (iter 'key)) (vector-set! v 0 #t))
              ((= 3 (iter 'key)) (vector-set! v 1 #t))
              ((= 5 (iter 'key)) (vector-set! v 2 #t))
              ((= 7 (iter 'key)) (vector-set! v 3 #t))
              (else (display "link: unit test 154 failing\n")))
        (iter '++)
        (loop iter))))
   ;; making sure all keys were part of iteration
     (let loop ((i 0))
      (if (>= i 4)
        'done
        (begin
          (if(not(eq? #t(vector-ref v i)))
            (display "link: unit test 155 failing\n"))
          (set! i (+ 1 i))
          (loop i)))))
;;  (a 'print)
;;  (newline)

  (display "link: unit test complete\n"))

(link-test)
(quit)
