module z where

import nat
open import id
open import bool
open import void
open import sum

‚Ñï = nat.‚Ñï

‚Ñ§-pos-t : ‚Ñï ‚Üí Set
‚Ñ§-pos-t nat.zero     = ‚ä§
‚Ñ§-pos-t (nat.succ _) = ùîπ

data ‚Ñ§ : Set where
  mk‚Ñ§ : (n : ‚Ñï) ‚Üí ‚Ñ§-pos-t n ‚Üí ‚Ñ§ 


0‚Ñ§ : ‚Ñ§
0‚Ñ§ = mk‚Ñ§ 0 triv

1‚Ñ§ : ‚Ñ§
1‚Ñ§ = mk‚Ñ§ 1 tt

-1‚Ñ§ : ‚Ñ§
-1‚Ñ§ = mk‚Ñ§ 1 ff

abs : ‚Ñ§ ‚Üí ‚Ñï
abs (mk‚Ñ§ n _) = n


is-even‚Ñ§ : ‚Ñ§ ‚Üí ùîπ
is-even‚Ñ§ (mk‚Ñ§ n _) = nat.is-even n


is-odd‚Ñ§ : ‚Ñ§ ‚Üí ùîπ
is-odd‚Ñ§ (mk‚Ñ§ n _) = nat.is-odd n

succ = nat.succ

-- diff‚Ñ§ n m = n - m
diff‚Ñ§ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñ§
diff‚Ñ§ n m with nat.‚Ñï-trichotomy n m
diff‚Ñ§ n m | left (left p)  = mk‚Ñ§
  (nat.diff‚Ñï (nat.‚â§-trans (nat.le-s (nat.le-n n)) p))
  (cast (ap ‚Ñ§-pos-t (‚â°-sym (nat.diff‚Ñï-pos m n _ p))) ff)
diff‚Ñ§ n m | left (right p) = 0‚Ñ§
diff‚Ñ§ n m | right p        = mk‚Ñ§
  (nat.diff‚Ñï (nat.‚â§-trans (nat.le-s (nat.le-n m)) p))
  (cast (ap ‚Ñ§-pos-t (‚â°-sym (nat.diff‚Ñï-pos n m _ p))) tt)

_+_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
mk‚Ñ§ nat.zero _ + m = m
n + mk‚Ñ§ nat.zero _ = n
mk‚Ñ§ (nat.succ n) tt + mk‚Ñ§ (nat.succ m) tt = mk‚Ñ§ (succ n nat.+ succ m) tt
mk‚Ñ§ (nat.succ n) tt + mk‚Ñ§ (nat.succ m) ff = diff‚Ñ§ n m
mk‚Ñ§ (nat.succ n) ff + mk‚Ñ§ (nat.succ m) tt = diff‚Ñ§ m n
mk‚Ñ§ (nat.succ n) ff + mk‚Ñ§ (nat.succ m) ff = mk‚Ñ§ (succ n nat.+ succ m) ff


+-n+0 : (n : ‚Ñ§) ‚Üí n + 0‚Ñ§ ‚â° n
+-n+0 (mk‚Ñ§ nat.zero triv)   = refl _
+-n+0 (mk‚Ñ§ (nat.succ n) tt) = refl _
+-n+0 (mk‚Ñ§ (nat.succ n) ff) = refl _

{-
+-assoc : (n m p : ‚Ñ§) ‚Üí (n + m) + p ‚â° n + (m + p)
+-assoc (mk‚Ñ§ nat.zero triv) (mk‚Ñ§ m s) (mk‚Ñ§ p t) = refl _
+-assoc (mk‚Ñ§ (nat.succ n) r) (mk‚Ñ§ nat.zero triv) (mk‚Ñ§ p t) = refl _
+-assoc (mk‚Ñ§ (nat.succ n) r) (mk‚Ñ§ (nat.succ m) s) (mk‚Ñ§ nat.zero triv) =
  ‚â°-trans
    (‚â°-sym (ap (Œª x ‚Üí (mk‚Ñ§ (nat.succ n) r + mk‚Ñ§ (nat.succ m) s) + x) (refl 0‚Ñ§)))
    (+-n+0 _)
+-assoc (mk‚Ñ§ (nat.succ n) tt) (mk‚Ñ§ (nat.succ m) tt) (mk‚Ñ§ (nat.succ p) tt) =
  ap (Œª x ‚Üí mk‚Ñ§ (nat.succ x) tt) (nat.+-assoc n (nat.succ m) (nat.succ p))
+-assoc (mk‚Ñ§ (nat.succ n) tt) (mk‚Ñ§ (nat.succ m) tt) (mk‚Ñ§ (nat.succ p) ff) = {!!}
+-assoc (mk‚Ñ§ (nat.succ n) tt) (mk‚Ñ§ (nat.succ m) ff) (mk‚Ñ§ (nat.succ p) t) = {!!}
+-assoc (mk‚Ñ§ (nat.succ n) ff) (mk‚Ñ§ (nat.succ m) s) (mk‚Ñ§ (nat.succ p) t) = {!!}
-}



