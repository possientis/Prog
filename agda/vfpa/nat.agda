module nat where

open import id
open import sum
open import bool
open import void
open import relations
import min-max as minmax

data ‚Ñï : Set where
  zero : ‚Ñï
  succ : ‚Ñï ‚Üí ‚Ñï

{-# BUILTIN NATURAL ‚Ñï #-}

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero   + y = y
succ x + y = succ (x + y)

succ-not-0 : (n : ‚Ñï) ‚Üí ¬¨ (succ n ‚â° 0)
succ-not-0 n ()

+-n+O : (n : ‚Ñï)‚Üí n + 0 ‚â° n
+-n+O zero     = refl 0
+-n+O (succ n) = ap succ (+-n+O n)

+-assoc : (n m p : ‚Ñï) ‚Üí (n + m) + p ‚â° n + (m + p)
+-assoc zero m p     = refl (m + p)
+-assoc (succ n) m p = ap succ (+-assoc n m p)

+-n+succ : (n m : ‚Ñï) ‚Üí n + succ m ‚â° succ (n + m)
+-n+succ zero m     = refl (succ m)
+-n+succ (succ n) m = ap succ (+-n+succ n m)

+-comm : (n m : ‚Ñï) ‚Üí n + m ‚â° m + n
+-comm zero m     = ‚â°-sym (+-n+O m)
+-comm (succ n) m = ‚â°-trans (ap succ (+-comm n m)) (‚â°-sym (+-n+succ m n))

infix 5 _+_
infix 6 _*_

_*_ : ‚Ñï¬†‚Üí ‚Ñï ‚Üí ‚Ñï
zero * m = 0
succ n * m = m + n * m

*-distribr : (n m p : ‚Ñï) ‚Üí (n + m) * p ‚â° n * p + m * p
*-distribr zero m p     = refl (m * p)
*-distribr (succ n) m p = ‚â°-trans
  (ap (Œª x ‚Üí p + x) (*-distribr n m p))
  (‚â°-sym (+-assoc p (n * p) (m * p)))

*-n*0 : (n : ‚Ñï) ‚Üí n * 0 ‚â° 0
*-n*0 zero     = refl 0
*-n*0 (succ n) = *-n*0 n

*-n*succ : (n m : ‚Ñï) ‚Üí n * succ m ‚â° n + n * m
*-n*succ zero m     = refl 0
*-n*succ (succ n) m = ap succ
  (‚â°-trans
    (‚â°-trans
      (‚â°-trans
        (ap (Œª x ‚Üí m + x) (*-n*succ n m))
        (‚â°-sym (+-assoc m n (n * m))))
      (ap (Œª x ‚Üí x + n * m) (+-comm m n)))
     (+-assoc n m (n * m)))


*-comm : (n m : ‚Ñï) ‚Üí n * m ‚â° m * n
*-comm zero m     = ‚â°-sym (*-n*0 m)
*-comm (succ n) m = ‚â°-sym
  (‚â°-trans
    (*-n*succ m n)
    (ap (Œª x ‚Üí m + x) (‚â°-sym (*-comm n m)))) 


*-assoc : (n m p : ‚Ñï) ‚Üí (n * m) * p ‚â° n * (m * p)
*-assoc zero m p     = refl 0
*-assoc (succ n) m p = ‚â°-trans
  (*-distribr m (n * m) p)
  (ap (Œª x ‚Üí m * p + x) (*-assoc n m p))

is-even : ‚Ñï ‚Üí ùîπ
is-odd  : ‚Ñï ‚Üí ùîπ
is-even zero = tt
is-even (succ n) = is-odd n
is-odd zero = ff
is-odd (succ n) = is-even n

pred : (n : ‚Ñï) ‚Üí ‚Ñï
pred zero     = 0
pred (succ n) = n

data _‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where
  le-n : (n : ‚Ñï)   ‚Üí n ‚â§ n
  le-s : {n m : ‚Ñï} ‚Üí n ‚â§ m ‚Üí n ‚â§ succ m 

infixr 4 _‚â§_


‚â§-refl : (n : ‚Ñï) ‚Üí n ‚â§ n
‚â§-refl n = le-n n

‚â§-trans : {n m p : ‚Ñï} ‚Üí n ‚â§ m ‚Üí m ‚â§ p ‚Üí n ‚â§ p
‚â§-trans p (le-n n) = p
‚â§-trans p (le-s q) = le-s (‚â§-trans p q)

‚â§-n-s : {n m : ‚Ñï} ‚Üí n ‚â§ m ‚Üí succ n ‚â§ succ m
‚â§-n-s (le-n n) = le-n (succ n)
‚â§-n-s (le-s p) = le-s (‚â§-n-s p)

‚â§-s-n : {n m : ‚Ñï} ‚Üí succ n ‚â§ succ m ‚Üí n ‚â§ m
‚â§-s-n {n} {.n} (le-n .(succ n)) = le-n n
‚â§-s-n {n} {m} (le-s p)          = ‚â§-trans (le-s (le-n n)) p

‚â§-0-n : (n : ‚Ñï) ‚Üí 0 ‚â§ n
‚â§-0-n zero     = le-n 0
‚â§-0-n (succ n) = le-s (‚â§-0-n n)

‚â§-anti : {n m : ‚Ñï} ‚Üí n ‚â§ m ‚Üí m ‚â§ n ‚Üí n ‚â° m
‚â§-anti {zero} {zero} p q     = refl _
‚â§-anti {succ n} {succ m} p q = ap succ (‚â§-anti (‚â§-s-n p) (‚â§-s-n q))

‚â§-s-0 : (n : ‚Ñï) ‚Üí ¬¨(succ n ‚â§ 0)
‚â§-s-0 n p = succ-not-0 n (‚â§-anti p (‚â§-0-n _))

{-
‚â§-total : ‚àÄ (n m : ‚Ñï) ‚Üí (n ‚â§ m) ‚à® (m ‚â§ n)
‚â§-total zero m            = left (‚â§-0-n m)
‚â§-total (succ n) zero     = right (‚â§-s-0 _)
‚â§-total (succ n) (succ m) with ‚â§-total n m
‚â§-total (succ n) (succ m) | left  p   = left (‚â§-n-s p)
‚â§-total (succ n) (succ m) | right p = right Œª q ‚Üí p (‚â§-s-n q)

max : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
max = minmax.max _‚â§_ ‚â§-refl ‚â§-anti ‚â§-total 
-}

_<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set
n < m = succ n ‚â§ m

infixr 4 _<_

<-n-s : {n m : ‚Ñï} ‚Üí n < m ‚Üí succ n < succ m
<-n-s p = ‚â§-n-s p 

<-s-n : {n m : ‚Ñï} -> succ n < succ m -> n < m
<-s-n p = ‚â§-s-n p

<-irrefl : {n : ‚Ñï} ‚Üí (n < n) -> ùïÜ
<-irrefl {succ n} p = <-irrefl (<-s-n p) 

-- This is a weak result
<-trans : {n m p : ‚Ñï} ‚Üí n < m ‚Üí m < p ‚Üí n < p
<-trans {n} {m} {p} pnm qmp = ‚â§-trans pnm (‚â§-trans (le-s (le-n m)) qmp)

‚â§-transitive2 : transitive _‚â§_
‚â§-transitive2 = ‚â§-trans

‚Ñï-trichotomy : (n m : ‚Ñï) ‚Üí (n < m) ‚à® (n ‚â° m) ‚à® (m < n)
‚Ñï-trichotomy zero zero      = left ( right (refl 0))
‚Ñï-trichotomy zero (succ m)  = left (left (‚â§-n-s (‚â§-0-n m)))
‚Ñï-trichotomy (succ n) zero  = right (‚â§-n-s (‚â§-0-n n))
‚Ñï-trichotomy (succ n) (succ m) with ‚Ñï-trichotomy n m
‚Ñï-trichotomy (succ n) (succ m) | left (left p)  = left (left (‚â§-n-s p))
‚Ñï-trichotomy (succ n) (succ m) | left (right p) = left (right (ap succ p))
‚Ñï-trichotomy (succ n) (succ m) | right p        = right (‚â§-n-s p)

-- diff‚Ñï n m = n - m
diff‚Ñï : {n m : ‚Ñï} ‚Üí (m ‚â§ n) ‚Üí ‚Ñï
diff‚Ñï {n} {zero} _        = n
diff‚Ñï {succ n} {succ m} p = diff‚Ñï (‚â§-s-n p)

diff‚Ñï-pos : (n m : ‚Ñï) -> (p : m ‚â§ n) -> (q : m < n) ‚Üí diff‚Ñï p ‚â° succ (diff‚Ñï q)
diff‚Ñï-pos (succ n) zero p q     = refl (succ n)
diff‚Ñï-pos (succ n) (succ m) p q = diff‚Ñï-pos n m (‚â§-s-n p) (<-s-n q)
