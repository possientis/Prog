import java.math.BigInteger;
import org.bitcoinj.core.ECKey;
import org.spongycastle.math.ec.ECCurve;
import org.spongycastle.math.ec.ECPoint;


public class Test7 {
  public static void main(String[] args){

    // secp256k1 elliptic curve
    ECCurve curve = ECKey.CURVE.getCurve();

    // the order of the curve
    BigInteger order = curve.getOrder();

    // fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141
    System.out.println(order.toString(16));

    // The generator of the curve
    ECPoint G = ECKey.CURVE.getG();
    BigInteger X = G.getAffineXCoord().toBigInteger();
    BigInteger Y = G.getAffineYCoord().toBigInteger();

    // 79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
    System.out.println(X.toString(16));

    // 483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
    System.out.println(Y.toString(16));


    // Computing order.G
    ECPoint test = G.multiply(order);

    System.out.println(test.isInfinity());  // true

    // so we know the order of G (i.e. the cardinal of its
    // generated subgroup) divides order. However:

    System.out.println(order.isProbablePrime(128)); // true

    // and G is not infinity. So the order of G is precisely order.
    // How do I check that the subgroup generated by G is actually 
    // the whole elliptic curve group, i.e. that the cofactor is 1?
  }
}
