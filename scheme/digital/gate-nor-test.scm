(load "gate-nor.scm")

(define (gate-nor-test)
  ;;
  (define in-0 (wire))
  (define in-1 (wire))
  (define out (wire))
  (define earth (wire))
  (define power (wire))
  ;;
  (display "gate-nor: starting unit test\n")
  ;;
  ;; setting up power supply
  ((earth 'set-signal!) #f 'x)
  ((power 'set-signal!) #t 'x)
  ;; connecting (in-0 in-1) and out to nor gate
  (gate-nor in-0 in-1 out earth power)
  ;; setting initial state
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  ;; checking initial state
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 1 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 2 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 3 failing\n"))
  ;; (1) transition (#t #t) -> (#t #t)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 4 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 5 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 6 failing\n"))
  ;; (2) transition (#t #t) -> (#t #f)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 7 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 8 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 9 failing\n"))
  ;; (3) transition (#t #f) -> (#t #f)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 10 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 11 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 12 failing\n"))
  ;; (4) transition (#t #f) -> (#f #f)
  ((in-0 'set-signal!) #f 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #f (in-0 'get-signal)))(display "gate-nor: unit-test 13 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 14 failing\n"))
  (if (not(eq? #t (out 'get-signal)))(display "gate-nor: unit-test 15 failing\n"))
  ;; (5) transition (#f #f) -> (#f #f)
  ((in-0 'set-signal!) #f 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #f (in-0 'get-signal)))(display "gate-nor: unit-test 16 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 17 failing\n"))
  (if (not(eq? #t (out 'get-signal)))(display "gate-nor: unit-test 18 failing\n"))
  ;; (6) transition (#f #f) -> (#t #f)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 19 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 20 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 21 failing\n"))
  ;; (7) transition (#t #f) -> (#t #f)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 19 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 20 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 21 failing\n"))
  ;; (8) transition (#f #t) -> (#t #t)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 22 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 23 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 24 failing\n"))
  ;; (9) transition (#t #t) -> (#f #f)
  ((in-0 'set-signal!) #f 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #f (in-0 'get-signal)))(display "gate-nor: unit-test 25 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 26 failing\n"))
  (if (not(eq? #t (out 'get-signal)))(display "gate-nor: unit-test 27 failing\n"))
  ;; (10) transition (#f #f) -> (#t #t)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 28 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 29 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 30 failing\n"))
  ;; (11) transition (#t #t) -> (#f #t)
  ((in-0 'set-signal!) #f 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  (if (not(eq? #f (in-0 'get-signal)))(display "gate-nor: unit-test 31 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 32 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 33 failing\n"))
  ;; (12) transition (#f #t) -> (#t #f)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 34 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 35 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 36 failing\n"))
  ;; (13) transition (#t #f) -> (#f #t)
  ((in-0 'set-signal!) #f 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  (if (not(eq? #f (in-0 'get-signal)))(display "gate-nor: unit-test 37 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 38 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 39 failing\n"))
  ;; (14) transition (#f #t) -> (#f #f)
  ((in-0 'set-signal!) #f 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #f (in-0 'get-signal)))(display "gate-nor: unit-test 40 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 41 failing\n"))
  (if (not(eq? #t (out 'get-signal)))(display "gate-nor: unit-test 42 failing\n"))
  ;; (15) transition (#f #f) -> (#t #f)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #f 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 43 failing\n"))
  (if (not(eq? #f (in-1 'get-signal)))(display "gate-nor: unit-test 44 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 45 failing\n"))
  ;; (16) transition (#t #f) -> (#t #t)
  ((in-0 'set-signal!) #t 'x)
  ((in-1 'set-signal!) #t 'x)
  (global 'propagate!)
  (if (not(eq? #t (in-0 'get-signal)))(display "gate-nor: unit-test 46 failing\n"))
  (if (not(eq? #t (in-1 'get-signal)))(display "gate-nor: unit-test 47 failing\n"))
  (if (not(eq? #f (out 'get-signal)))(display "gate-nor: unit-test 48 failing\n"))

  (display "gate-nor: unit test complete\n"))

(gate-nor-test)
(exit 0)

