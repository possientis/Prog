(load "binary.scm")

(define (binary-test)
  ;; start
  (display "binary: starting unit test\n")
  ;; boolean-list->integer
  ;; no bits
  (let ((n (boolean-list->integer '())))
    (if (not (= 0 n)) (display "binary: unit test 1 failing\n")))
  ;; single bit
  (let ((n (boolean-list->integer '(#f))))
    (if (not (= 0 n)) (display "binary: unit test 2 failing\n")))
  (let ((n (boolean-list->integer '(#t))))
    (if (not (= 1 n)) (display "binary: unit test 3 failing\n")))
  ;; two bits
  (let ((n (boolean-list->integer '(#f #f))))
    (if (not (= 0 n)) (display "binary: unit test 4 failing\n")))
  (let ((n (boolean-list->integer '(#f #t))))
    (if (not (= 1 n)) (display "binary: unit test 5 failing\n")))
  (let ((n (boolean-list->integer '(#t #f))))
    (if (not (= 2 n)) (display "binary: unit test 6 failing\n")))
  (let ((n (boolean-list->integer '(#t #t))))
    (if (not (= 3 n)) (display "binary: unit test 7 failing\n")))
  ;; three bits
  (let ((n (boolean-list->integer '(#f #f #f))))
    (if (not (= 0 n)) (display "binary: unit test 8 failing\n")))
  (let ((n (boolean-list->integer '(#f #f #t))))
    (if (not (= 1 n)) (display "binary: unit test 9 failing\n")))
  (let ((n (boolean-list->integer '(#f #t #f))))
    (if (not (= 2 n)) (display "binary: unit test 10 failing\n")))
  (let ((n (boolean-list->integer '(#f #t #t))))
    (if (not (= 3 n)) (display "binary: unit test 11 failing\n")))
  (let ((n (boolean-list->integer '(#t #f #f))))
    (if (not (= 4 n)) (display "binary: unit test 12 failing\n")))
  (let ((n (boolean-list->integer '(#t #f #t))))
    (if (not (= 5 n)) (display "binary: unit test 13 failing\n")))
  (let ((n (boolean-list->integer '(#t #t #f))))
    (if (not (= 6 n)) (display "binary: unit test 14 failing\n")))
  (let ((n (boolean-list->integer '(#t #t #t))))
    (if (not (= 7 n)) (display "binary: unit test 15 failing\n")))
  ;; four bits
  (let ((n (boolean-list->integer '(#f #f #f #f))))
    (if (not (= 0 n)) (display "binary: unit test 16 failing\n")))
  (let ((n (boolean-list->integer '(#f #f #f #t))))
    (if (not (= 1 n)) (display "binary: unit test 17 failing\n")))
  (let ((n (boolean-list->integer '(#f #f #t #f))))
    (if (not (= 2 n)) (display "binary: unit test 18 failing\n")))
  (let ((n (boolean-list->integer '(#f #f #t #t))))
    (if (not (= 3 n)) (display "binary: unit test 19 failing\n")))
  (let ((n (boolean-list->integer '(#f #t #f #f))))
    (if (not (= 4 n)) (display "binary: unit test 20 failing\n")))
  (let ((n (boolean-list->integer '(#f #t #f #t))))
    (if (not (= 5 n)) (display "binary: unit test 21 failing\n")))
  (let ((n (boolean-list->integer '(#f #t #t #f))))
    (if (not (= 6 n)) (display "binary: unit test 22 failing\n")))
  (let ((n (boolean-list->integer '(#f #t #t #t))))
    (if (not (= 7 n)) (display "binary: unit test 23 failing\n")))
  (let ((n (boolean-list->integer '(#t #f #f #f))))
    (if (not (= 8 n)) (display "binary: unit test 24 failing\n")))
  (let ((n (boolean-list->integer '(#t #f #f #t))))
    (if (not (= 9 n)) (display "binary: unit test 25 failing\n")))
  (let ((n (boolean-list->integer '(#t #f #t #f))))
    (if (not (= 10 n)) (display "binary: unit test 26 failing\n")))
  (let ((n (boolean-list->integer '(#t #f #t #t))))
    (if (not (= 11 n)) (display "binary: unit test 27 failing\n")))
  (let ((n (boolean-list->integer '(#t #t #f #f))))
    (if (not (= 12 n)) (display "binary: unit test 28 failing\n")))
  (let ((n (boolean-list->integer '(#t #t #f #t))))
    (if (not (= 13 n)) (display "binary: unit test 30 failing\n")))
  (let ((n (boolean-list->integer '(#t #t #t #f))))
    (if (not (= 14 n)) (display "binary: unit test 31 failing\n")))
  (let ((n (boolean-list->integer '(#t #t #t #t))))
    (if (not (= 15 n)) (display "binary: unit test 32 failing\n")))
  ;; integer->boolean-list
  (if (not (equal? (integer->boolean-list 0) '()))
    (display "binary: unit test 33 failing\n"))
  (if (not (equal? (integer->boolean-list 1) '(#t)))
    (display "binary: unit test 34 failing\n"))
  (if (not (equal? (integer->boolean-list 2) '(#t #f)))
    (display "binary: unit test 35 failing\n"))
  (if (not (equal? (integer->boolean-list 3) '(#t #t)))
    (display "binary: unit test 36 failing\n"))
  (if (not (equal? (integer->boolean-list 4) '(#t #f #f)))
    (display "binary: unit test 37 failing\n"))
  (if (not (equal? (integer->boolean-list 5) '(#t #f #t)))
    (display "binary: unit test 38 failing\n"))
  (if (not (equal? (integer->boolean-list 6) '(#t #t #f)))
    (display "binary: unit test 39 failing\n"))
  (if (not (equal? (integer->boolean-list 7) '(#t #t #t)))
    (display "binary: unit test 40 failing\n"))
  (if (not (equal? (integer->boolean-list 8) '(#t #f #f #f)))
    (display "binary: unit test 41 failing\n"))
  (if (not (equal? (integer->boolean-list 9) '(#t #f #f #t)))
    (display "binary: unit test 42 failing\n"))
  (if (not (equal? (integer->boolean-list 10) '(#t #f #t #f)))
    (display "binary: unit test 43 failing\n"))
  (if (not (equal? (integer->boolean-list 11) '(#t #f #t #t)))
    (display "binary: unit test 44 failing\n"))
  (if (not (equal? (integer->boolean-list 12) '(#t #t #f #f)))
    (display "binary: unit test 45 failing\n"))
  (if (not (equal? (integer->boolean-list 13) '(#t #t #f #t)))
    (display "binary: unit test 46 failing\n"))
  (if (not (equal? (integer->boolean-list 14) '(#t #t #t #f)))
    (display "binary: unit test 47 failing\n"))
  (if (not (equal? (integer->boolean-list 15) '(#t #t #t #t)))
    (display "binary: unit test 48 failing\n"))
  ;; combined test
  (let ((N 16)) ;; number of bits
    (let loop ((i (- (expt 2 N) 1)))
      (if (> i 0)
        (let ((num (boolean-list->integer (integer->boolean-list i))))
          (if (not (= num i)) (display "binary: unit test 49 failing\n"))
          (loop (- i 1))))))
  ;; boolean-vect->integer
  ;; no bits
  (let ((n (boolean-vect->integer #())))
    (if (not (= 0 n)) (display "binary: unit test 50 failing\n")))
  ;; single bit
  (let ((n (boolean-vect->integer #(#f))))
    (if (not (= 0 n)) (display "binary: unit test 51 failing\n")))
  (let ((n (boolean-vect->integer #(#t))))
    (if (not (= 1 n)) (display "binary: unit test 52 failing\n")))
  ;; two bits
  (let ((n (boolean-vect->integer #(#f #f))))
    (if (not (= 0 n)) (display "binary: unit test 53 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f))))
    (if (not (= 1 n)) (display "binary: unit test 54 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t))))
    (if (not (= 2 n)) (display "binary: unit test 55 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t))))
    (if (not (= 3 n)) (display "binary: unit test 56 failing\n")))
  ;; three bits
  (let ((n (boolean-vect->integer #(#f #f #f))))
    (if (not (= 0 n)) (display "binary: unit test 57 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f #f))))
    (if (not (= 1 n)) (display "binary: unit test 58 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t #f))))
    (if (not (= 2 n)) (display "binary: unit test 59 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t #f))))
    (if (not (= 3 n)) (display "binary: unit test 60 failing\n")))
  (let ((n (boolean-vect->integer #(#f #f #t))))
    (if (not (= 4 n)) (display "binary: unit test 61 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f #t))))
    (if (not (= 5 n)) (display "binary: unit test 62 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t #t))))
    (if (not (= 6 n)) (display "binary: unit test 63 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t #t))))
    (if (not (= 7 n)) (display "binary: unit test 64 failing\n")))
  ;; four bits
  (let ((n (boolean-vect->integer #(#f #f #f #f))))
    (if (not (= 0 n)) (display "binary: unit test 65 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f #f #f))))
    (if (not (= 1 n)) (display "binary: unit test 66 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t #f #f))))
    (if (not (= 2 n)) (display "binary: unit test 67 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t #f #f))))
    (if (not (= 3 n)) (display "binary: unit test 68 failing\n")))
  (let ((n (boolean-vect->integer #(#f #f #t #f))))
    (if (not (= 4 n)) (display "binary: unit test 69 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f #t #f))))
    (if (not (= 5 n)) (display "binary: unit test 70 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t #t #f))))
    (if (not (= 6 n)) (display "binary: unit test 71 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t #t #f))))
    (if (not (= 7 n)) (display "binary: unit test 72 failing\n")))
  (let ((n (boolean-vect->integer #(#f #f #f #t))))
    (if (not (= 8 n)) (display "binary: unit test 73 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f #f #t))))
    (if (not (= 9 n)) (display "binary: unit test 74 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t #f #t))))
    (if (not (= 10 n)) (display "binary: unit test 75 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t #f #t))))
    (if (not (= 11 n)) (display "binary: unit test 76 failing\n")))
  (let ((n (boolean-vect->integer #(#f #f #t #t))))
    (if (not (= 12 n)) (display "binary: unit test 77 failing\n")))
  (let ((n (boolean-vect->integer #(#t #f #t #t))))
    (if (not (= 13 n)) (display "binary: unit test 78 failing\n")))
  (let ((n (boolean-vect->integer #(#f #t #t #t))))
    (if (not (= 14 n)) (display "binary: unit test 79 failing\n")))
  (let ((n (boolean-vect->integer #(#t #t #t #t))))
    (if (not (= 15 n)) (display "binary: unit test 80 failing\n")))
  ;; integer->boolean-vect
  ;; 0
  (if (not (equal? (integer->boolean-vect 0 0) #()))
    (display "binary: unit test 81 failing\n"))
  (if (not (equal? (integer->boolean-vect 0 1) #(#f)))
    (display "binary: unit test 82 failing\n"))
  (if (not (equal? (integer->boolean-vect 0 2) #(#f #f)))
    (display "binary: unit test 83 failing\n"))
  (if (not (equal? (integer->boolean-vect 0 4) #(#f #f #f #f)))
    (display "binary: unit test 84 failing\n"))
  ;; others
  (if (not (equal? (integer->boolean-vect 1 8) #(#t #f #f #f #f #f #f #f)))
    (display "binary: unit test 85 failing\n"))
  (if (not (equal? (integer->boolean-vect 2 8) #(#f #t #f #f #f #f #f #f)))
    (display "binary: unit test 86 failing\n"))
  (if (not (equal? (integer->boolean-vect 3 8) #(#t #t #f #f #f #f #f #f)))
    (display "binary: unit test 87 failing\n"))
  (if (not (equal? (integer->boolean-vect 4 8) #(#f #f #t #f #f #f #f #f)))
    (display "binary: unit test 88 failing\n"))
  (if (not (equal? (integer->boolean-vect 5 8) #(#t #f #t #f #f #f #f #f)))
    (display "binary: unit test 89 failing\n"))
  (if (not (equal? (integer->boolean-vect 6 8) #(#f #t #t #f #f #f #f #f)))
    (display "binary: unit test 90 failing\n"))
  (if (not (equal? (integer->boolean-vect 7 8) #(#t #t #t #f #f #f #f #f)))
    (display "binary: unit test 91 failing\n"))
  (if (not (equal? (integer->boolean-vect 8 8) #(#f #f #f #t #f #f #f #f)))
    (display "binary: unit test 92 failing\n"))
  (if (not (equal? (integer->boolean-vect 9 8) #(#t #f #f #t #f #f #f #f)))
    (display "binary: unit test 93 failing\n"))
  (if (not (equal? (integer->boolean-vect 10 8) #(#f #t #f #t #f #f #f #f)))
    (display "binary: unit test 94 failing\n"))
  (if (not (equal? (integer->boolean-vect 11 8) #(#t #t #f #t #f #f #f #f)))
    (display "binary: unit test 95 failing\n"))
  (if (not (equal? (integer->boolean-vect 12 8) #(#f #f #t #t #f #f #f #f)))
    (display "binary: unit test 96 failing\n"))
  (if (not (equal? (integer->boolean-vect 13 8) #(#t #f #t #t #f #f #f #f)))
    (display "binary: unit test 97 failing\n"))
  (if (not (equal? (integer->boolean-vect 14 8) #(#f #t #t #t #f #f #f #f)))
    (display "binary: unit test 98 failing\n"))
  (if (not (equal? (integer->boolean-vect 15 8) #(#t #t #t #t #f #f #f #f)))
    (display "binary: unit test 99 failing\n"))
  ;;
  (display "binary: unit test complete\n"))

(binary-test)
(exit 0)
