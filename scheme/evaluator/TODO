eval-procedure v primitive-procedure: how to make 'apply' lazy for primitives?

(lazy-eval '(display "This should not run until forced\n"))

lazy-eval-application: pass list of thunks rather than calling 'map lazy-eval'

understand why:
   try(0 (test)) 
behaves as expected while:
   try(0 (display "oh no"))
does not in test.scm

(define (try a b) (if (= 0 a) 1 b))
compare lazy and strict eval of
> (try 0 (error))
what happens if we use lazy-run? is lazy-run the same as strict-run? 


define primitives from language itself
implement macros
lazy evaluation of arguments (with or without memoization)
change semantics of apply
check semantics of '() vs ()
incorporate frame4 with hash-table library

