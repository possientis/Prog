(define (assert condition message)
  (if condition 'done (error message)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  0                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define nul #\nul)
(assert (char=? nul #\nul)    "nul.0")
(assert (char=? nul #\null)   "nul.1")
(assert (char=? nul #\000)    "nul.2")
(assert (char=? nul #\x0000)  "nul.3")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  1                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define soh #\soh)
(assert (char=? soh #\soh)    "soh.0")
(assert (char=? soh #\001)    "soh.1")
(assert (char=? soh #\x0001)  "soh.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  2                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define stx #\stx)
(assert (char=? stx #\stx)    "stx.0")
(assert (char=? stx #\002)    "stx.1")
(assert (char=? stx #\x0002)  "stx.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  3                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define etx #\etx)
(assert (char=? etx #\etx)    "etx.0")
(assert (char=? etx #\003)    "etx.1")
(assert (char=? etx #\x0003)  "etx.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  4                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define eot #\eot)
(assert (char=? eot #\eot)    "eot.0")
(assert (char=? eot #\004)    "eot.1")
(assert (char=? eot #\x0004)  "eot.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  5                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define enq #\enq)
(assert (char=? enq #\enq)    "enq.0")
(assert (char=? enq #\005)    "enq.1")
(assert (char=? enq #\x0005)  "enq.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  6                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define ack #\ack)
(assert (char=? ack #\ack)    "ack.0")
(assert (char=? ack #\006)    "ack.1")
(assert (char=? ack #\x0006)  "ack.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  7                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define alarm #\alarm)
(assert (char=? alarm #\alarm)  "alarm.0")
(assert (char=? alarm #\bel)    "alarm.1")
(assert (char=? alarm #\007)    "alarm.2")
(assert (char=? alarm #\x0007)  "alarm.3")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  8                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define backspace #\backspace)
(assert (char=? backspace #\backspace)  "backspace.0")
(assert (char=? backspace #\bs)         "backspace.1")
(assert (char=? backspace #\010)        "backspace.2")
(assert (char=? backspace #\x0008)      "backspace.3")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                  9                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define tab #\tab)
(assert (char=? tab #\tab)    "tab.0")
(assert (char=? tab #\ht)     "tab.1")
(assert (char=? tab #\011)    "tab.2")
(assert (char=? tab #\x0009)  "tab.3")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 10                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define linefeed #\linefeed)
(assert (char=? linefeed #\linefeed)  "linefeed.0")
(assert (char=? linefeed #\lf)        "linefeed.1")
(assert (char=? linefeed #\newline)   "linefeed.2")
(assert (char=? linefeed #\nl)        "linefeed.3")
(assert (char=? linefeed #\012)       "linefeed.4")
(assert (char=? linefeed #\x000a)     "linefeed.5")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 11                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define vtab #\vtab)
(assert (char=? vtab #\vtab)   "vtab.0")
(assert (char=? vtab #\vt)     "vtab.1")
(assert (char=? vtab #\013)    "vtab.2")
(assert (char=? vtab #\x000b)  "vtab.3")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 12                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define page #\page)
(assert (char=? page #\page)   "page.0")
(assert (char=? page #\ff)     "page.1")
(assert (char=? page #\np)     "page.2")
(assert (char=? page #\014)    "page.3")
(assert (char=? page #\x000c)  "page.4")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 13                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define return #\return)
(assert (char=? return #\return) "return.0")
(assert (char=? return #\cr)     "return.1")
(assert (char=? return #\015)    "return.2")
(assert (char=? return #\x000d)  "return.3")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 14                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define so #\so)
(assert (char=? so #\so)     "so.0")
(assert (char=? so #\016)    "so.1")
(assert (char=? so #\x000e)  "so.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 15                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define si #\si)
(assert (char=? si #\si)      "si.0")
(assert (char=? si #\017)     "si.1")
(assert (char=? si #\x000f)   "si.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 16                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define dle #\dle)
(assert (char=? dle #\dle)     "dle.0")
(assert (char=? dle #\020)     "dle.1")
(assert (char=? dle #\x0010)   "dle.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 17                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define dc1 #\dc1)
(assert (char=? dc1 #\dc1)     "dc1.0")
(assert (char=? dc1 #\021)     "dc1.1")
(assert (char=? dc1 #\x0011)   "dc1.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 18                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define dc2 #\dc2)
(assert (char=? dc2 #\dc2)     "dc2.0")
(assert (char=? dc2 #\022)     "dc2.1")
(assert (char=? dc2 #\x0012)   "dc2.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 19                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define dc3 #\dc3)
(assert (char=? dc3 #\dc3)     "dc3.0")
(assert (char=? dc3 #\023)     "dc3.1")
(assert (char=? dc3 #\x0013)   "dc3.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 20                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define dc4 #\dc4)
(assert (char=? dc4 #\dc4)     "dc4.0")
(assert (char=? dc4 #\024)     "dc4.1")
(assert (char=? dc4 #\x0014)   "dc4.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 21                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define nak #\nak)
(assert (char=? nak #\nak)     "nak.0")
(assert (char=? nak #\025)     "nak.1")
(assert (char=? nak #\x0015)   "nak.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 22                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define syn #\syn)
(assert (char=? syn #\syn)     "syn.0")
(assert (char=? syn #\026)     "syn.1")
(assert (char=? syn #\x0016)   "syn.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 23                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define etb #\etb)
(assert (char=? etb #\etb)     "etb.0")
(assert (char=? etb #\027)     "etb.1")
(assert (char=? etb #\x0017)   "etb.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 24                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define can #\can)
(assert (char=? can #\can)     "can.0")
(assert (char=? can #\030)     "can.1")
(assert (char=? can #\x0018)   "can.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 25                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define em #\em)
(assert (char=? em #\em)      "em.0")
(assert (char=? em #\031)     "em.1")
(assert (char=? em #\x0019)   "em.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 26                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define sub #\sub)
(assert (char=? sub #\sub)     "sub.0")
(assert (char=? sub #\032)     "sub.1")
(assert (char=? sub #\x001a)   "sub.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 27                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define esc #\escape)
(assert (char=? esc #\escape) "esc.0")
(assert (char=? esc #\esc)    "esc.1")
(assert (char=? esc #\033)    "esc.2")
(assert (char=? esc #\x001b)  "esc.3")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 28                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define fs #\fs)
(assert (char=? fs #\fs)     "fs.0")
(assert (char=? fs #\034)    "fs.1")
(assert (char=? fs #\x001c)  "fs.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 29                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define gs #\gs)
(assert (char=? gs #\gs)     "gs.0")
(assert (char=? gs #\035)    "gs.1")
(assert (char=? gs #\x001d)  "gs.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 30                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define rs #\rs)
(assert (char=? rs #\rs)     "rs.0")
(assert (char=? rs #\036)    "rs.1")
(assert (char=? rs #\x001e)  "rs.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 31                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define us #\us)
(assert (char=? us #\us)     "us.0")
(assert (char=? us #\037)    "us.1")
(assert (char=? us #\x001f)  "us.2")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 32                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define space #\space)
(assert (char=? space #\space)  "space.0")
(assert (char=? space #\sp)     "space.1")
(assert (char=? space #\040)    "space.2")
(assert (char=? space #\x0020)  "space.3")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                 127                                  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define delete #\delete)
(assert (char=? delete #\delete) "delete.0")
(assert (char=? delete #\del)    "delete.1")
(assert (char=? delete #\177)    "delete.2")
(assert (char=? delete #\x007f)  "delete.3")

(exit 0)
