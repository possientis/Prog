Require Import List.

Require Import Logic.Class.Eq.

Require Import Logic.Func.Replace.
Require Import Logic.Func.Permute.
Require Import Logic.Func.Identity.
Require Import Logic.Func.Injective.
Require Import Logic.Func.Composition.

Require Import Logic.List.In.
Require Import Logic.List.Remove.
Require Import Logic.List.Coincide.
Require Import Logic.List.Difference.

Require Import Logic.Rel.Include.

Require Import Logic.Lam.Free.
Require Import Logic.Lam.Valid.
Require Import Logic.Lam.Syntax.
Require Import Logic.Lam.Functor.
Require Import Logic.Lam.Variable.
Require Import Logic.Lam.Subformula.
Require Import Logic.Lam.Congruence.

(* Generator of strong alpha-equivalence.                                       *)
Inductive StrongAlpha0 (v:Type) (e:Eq v) : T v -> T v -> Prop :=
| mkStrongAlpha0: forall (x y:v) (t1:T v), 
    x <> y        -> 
    ~ y :: var t1 ->
    StrongAlpha0 v e (Lam x t1) (Lam y (fmap (y // x) t1)) 
.

Arguments StrongAlpha0 {v} {e}.
Arguments mkStrongAlpha0 {v} {e}.

(* The strong alpha-equivalence is the congruence generated by StrongAlph0.     *)
Definition StrongAlpha (v:Type) (e:Eq v) : T v -> T v -> Prop := 
    Cong (@StrongAlpha0 v e).

Arguments StrongAlpha {v} {e}.

Notation "t ~ s" := (StrongAlpha t s)
    (at level 60, no associativity) : Fol_StrongAlpha_scope.

Open Scope Fol_StrongAlpha_scope.

(* Not following pdf to obtain stronger result of equality as lists.            *)
Lemma StrongAlpha_free : forall (v:Type) (e:Eq v) (t s:T v), 
    t ~ s -> Fr t = Fr s.
Proof.
    intros v e. apply incl_charac. apply Cong_smallest.
    - apply free_congruence.
    - apply incl_charac. intros x y H1. destruct H1 as [x y t1 H1 H2]. 
      simpl.
      assert (valid (y // x) t1) as H3. { apply valid_replace. assumption. }
      assert (Fr (fmap (y // x) t1) = map (y // x) (Fr t1)) as H4.
        { destruct (valid_free v v e e (y // x) t1) as [H5 H6].
          apply H5.
            { apply H3. } 
            { apply Sub_refl. }}
      rewrite H4. assert (y = (y // x) x) as H7.
        { rewrite replace_x. reflexivity. } 
      rewrite H7 at 1. clear H3 H4 H7. rewrite (remove_map v v e e).
        + rewrite (coincide_map v v (y //x) id).
            { symmetry. apply map_id. }
            { intros u H3. apply replace_not_x. unfold id. intros H4. 
              subst. revert H3. apply remove_x_gone. }
        + intros u H3 H4. rewrite replace_x. rewrite replace_not_x; 
          intros H5; subst.
            { apply H2. apply (free_var v e). assumption. }
            { apply H3. reflexivity. }
Qed.

(* Strong alpha-equivalence is preserved by injective maps.                     *)
Lemma StrongAlpha_injective : 
    forall (v w:Type) (e:Eq v) (e':Eq w) (f:v -> w) (t s:T v),
        injective f -> t ~ s -> fmap f t ~ fmap f s.
Proof.
    intros v w e e' f t s H1 H2. revert t s H2. 
    apply incl_charac, Cong_smallest.
    - apply fmap_congruence, Cong_congruence.
    - apply incl_charac. intros t s H2. destruct H2 as [x y p1 H2 H3]. simpl.
      apply CongBase. rewrite <- fmap_comp'. 
      assert (f ; (y // x) = (f y // f x) ; f) as H4. {
        apply replace_injective. assumption. }
      rewrite H4. rewrite fmap_comp. constructor.
        + intros H5. apply H2, H1. assumption.
        + intros H5. rewrite var_fmap in H5. apply in_map_iff in H5.
          destruct H5 as [u [H5 H6]]. apply H1 in H5. subst.
          apply H3 in H6. contradiction.
Qed.

(* Strong alpha-equivalence is preserved by var replacement with caveat.        *)
Lemma StrongAlpha_replace : 
    forall (v:Type) (e:Eq v) (t s:T v) (x y:v),
        ~ y :: var t -> ~ y :: var s -> 
            t ~ s -> fmap (y // x) t ~ fmap (y // x) s.
Proof.
    intros v e t s x y H1 H2 H3.
    assert (fmap (y // x) t = fmap (y <:> x) t) as H4.
        { apply var_replace_permute. assumption. }
    assert (fmap (y // x) s = fmap (y <:> x) s) as H5.
        { apply var_replace_permute. assumption. }
    rewrite H4, H5. apply (StrongAlpha_injective _ _ _).
    apply permute_injective. assumption.
Qed.

(* Strong alpha-equivalence class unchanged by var replacement with caveat.     *)
Lemma StrongAlpha_replace_self:
    forall (v:Type) (e:Eq v) (t:T v) (x y:v),
        ~ y :: var t -> 
        ~ x :: Fr t  ->
        fmap (y // x) t ~ t.
Proof.
    intros v e t x y. revert t. 
    induction t as [x'|p1 IH1 p2 IH2|x' p1 IH1]; 
    intros H1 H2; simpl; simpl in H1; simpl in H2.
    - unfold replace. 
      destruct (eqDec x' x) as [H3|H3].
        + subst. exfalso. apply H2. left. reflexivity.
        + apply Cong_reflexive.
    - apply CongApp.
        + apply IH1; intros H3.
            { apply H1, in_or_app. left. assumption. }
            { apply H2, in_or_app. left. assumption. }
        + apply IH2; intros H3.
            { apply H1, in_or_app. right. assumption. }
            { apply H2, in_or_app. right. assumption. }
    - unfold replace. destruct (eqDec x' x) as [H3|H3].
        + subst. destruct (eqDec x y) as [H4|H4].
            { subst. apply CongLam. fold (y // y). rewrite replace_x_x.
              rewrite fmap_id. apply Cong_reflexive. }
            { fold (y // x). apply Cong_symmetric, CongBase. 
              constructor; try assumption.
              intros H5. apply H1. right. assumption. }
        + apply CongLam. apply IH1; intros H4.
            { apply H1. right. assumption. }
            { apply H2. exfalso. apply H2. apply remove_still; assumption. }
Qed.

(* Almost strong alpha-equivalence. Will be shown to be the same.               *)
Inductive AlmostStrongAlpha (v:Type) (e:Eq v) : T v -> T v -> Prop := 
| AVar : forall (x:v), AlmostStrongAlpha v e (Var x) (Var x)
| AApp  : forall (t1 t2 s1 s2:T v), 
    t1 ~ s1 -> 
    t2 ~ s2 -> 
    AlmostStrongAlpha v e (App t1 t2) (App s1 s2)
| ALamx : forall (x:v) (t1 s1:T v), 
    t1 ~ s1 -> 
    AlmostStrongAlpha v e (Lam x t1) (Lam x s1)
| ALamxy : forall (x y:v) (t1 s1 r:T v),
    x <> y               ->
    t1 ~ r               ->
    s1 ~ fmap (y // x) r ->
    ~ y :: var r         ->
    AlmostStrongAlpha v e (Lam x t1) (Lam y s1)
.

Arguments AlmostStrongAlpha {v} {e}.

Notation "t :~: s" := (AlmostStrongAlpha t s)
    (at level 60, no associativity) : Lam_StrongAlpha_scope.

Open Scope Lam_StrongAlpha_scope.

Lemma almostAppRev : forall (v:Type) (e:Eq v) (t1 t2 s:T v), 
    App t1 t2 :~: s -> exists (s1 s2:T v),
        (t1 ~ s1) /\ (t2 ~ s2) /\ (s = App s1 s2).
Proof.
    intros v e t1 t2 s H1. remember (App t1 t2) as t eqn:E. revert t1 t2 E.
    destruct H1 as [x|t1' t2' s1 s2 H1 H2|x t1' s1|x y t1' s1 r H1 H2 H3 H4];
    intros t1 t2 E; inversion E. subst. exists s1. exists s2.
    split; try assumption. split; try assumption. reflexivity.
Qed.

Lemma almostLamRev : forall (v:Type) (e:Eq v) (t1 s:T v) (x:v),
    Lam x t1 :~: s -> 
        (exists (s1:T v), (t1 ~ s1) /\ (s = Lam x s1)) \/
        (exists (s1 r:T v) (y:v),
            (x <> y)                /\ 
            (t1 ~ r)                /\ 
            (s1 ~ fmap (y // x) r)  /\
            (~ y :: var r)          /\
            (s = Lam y s1)).
Proof.
    intros v e t1 s x H1. remember (Lam x t1) as t eqn:E. revert x t1 E.
    destruct H1 as [x'|t1' t2 s1 s2 H1 H2|x' t1' s1|x' y t1' s1 r H1 H2 H3 H4];
    intros x t1 E; inversion E; subst; clear E.
    - left. exists s1. split; try assumption. reflexivity.
    - right. exists s1. exists r. exists y.
      split; try assumption.
      split; try assumption.
      split; try assumption.
      split; try assumption.
      reflexivity.
Qed.

(* Almost equivalence contains generator of strong alpha-equivalence.           *)
Lemma almostSrongAlpha0 : forall (v:Type) (e:Eq v),
    @StrongAlpha0 v e <= @AlmostStrongAlpha v e.
Proof.
    intros v e. apply incl_charac. intros t s H1.
    destruct H1 as [x y p1 H1 H2]. apply ALamxy with p1;
    try assumption; try (apply Cong_reflexive).
Qed.

(* Almost equivalence is reflexive.                                             *)
Lemma almostRefl : forall (v:Type) (e:Eq v) (t:T v), t :~: t.
Proof.
    intros v e t. destruct t as [x|t1 t2|x t1]; 
    try constructor; try (apply Cong_reflexive).
Qed.

(* Almost equivalence is symmetric.                                             *)
Lemma almostSym : forall (v:Type) (e:Eq v) (t s:T v), t :~: s -> s :~: t.
Proof.
    intros v e t s H1. 
    destruct H1 as [x|t1 t2 s1 s2 H1 H2|x t1 s1|x y t1 s1 r H1 H2 H3 H4].
    - constructor.
    - constructor; apply Cong_symmetric; assumption.
    - constructor. apply Cong_symmetric. assumption.
    - apply ALamxy with (fmap (y // x) r).
        + intros H5. apply H1. symmetry. assumption.
        + assumption.
        + apply Cong_transitive with r; try assumption.
          assert (r = fmap (x // y) (fmap (y // x) r)) as H5.
            { rewrite var_replace_trans; try assumption.
              rewrite replace_x_x. rewrite fmap_id. reflexivity. }
          rewrite <- H5. apply Cong_reflexive.
        + apply var_replace_remove. assumption.
Qed.

(* Almost equivalence is transitive.                                            *)
Lemma almostTrans : forall (v:Type) (e:Eq v) (t s r:T v),
    t :~: s -> s :~: r -> t :~: r.
Proof.
    intros v e t s r H1. revert r.
    destruct H1 as [x|t1 t2 s1 s2 H1 H2|x t1 s1|x y t1 s1 r' H1 H2 H3 H4];
    intros r H5.
    - assumption.
    - apply almostAppRev in H5. 
      destruct H5 as [r1 [r2 [H5 [H6 H7]]]]. subst. constructor.
        + apply Cong_transitive with s1; assumption.
        + apply Cong_transitive with s2; assumption.
    - apply almostLamRev in H5. destruct H5 as [H5|H5].
        + destruct H5 as [r1 [H5 H6]]. subst. constructor.
          apply Cong_transitive with s1; assumption.
        + destruct H5 as [r1 [r' [y [H5 [H6 [H7 [H8 H9]]]]]]]. subst. 
          apply ALamxy with r'; try assumption.
          apply Cong_transitive with s1; assumption.
    - apply almostLamRev in H5. destruct H5 as [H5|H5].
        + destruct H5 as [r1 [H5 H6]]. subst.
          apply ALamxy with r'; try assumption.
          apply Cong_transitive with s1; try assumption.
          apply Cong_symmetric. assumption.
        + destruct H5 as [r1 [s' [z [H5 [H6 [H7 [H8 H9]]]]]]]. subst.
          destruct (eqDec x z) as [H10|H10].
            { subst. constructor. 
              rewrite var_replace_permute in H3; try assumption.
              rewrite var_replace_permute in H7; try assumption.
              rewrite permute_comm in H7.
              apply Cong_transitive with (fmap (y <:> z) s');
              try (apply Cong_symmetric; assumption).
              apply Cong_transitive with (fmap (y <:> z) s1).
              { apply Cong_transitive with (fmap (y <:> z) (fmap (y <:> z) r')).
                { rewrite <- fmap_comp', permute_involution, fmap_id.
                  assumption. }
                { apply (StrongAlpha_injective _ _ _ _).
                    { apply permute_injective. }
                    { apply Cong_symmetric. assumption. }}}  
              { apply (StrongAlpha_injective _ _ _ _); try assumption.
                  { apply permute_injective. }}}
            { assert (~z :: Fr r') as K.
                { intros H9.
                  assert (z :: Fr (fmap (y // x) r')) as H11.
                    { destruct (in_dec eqDec x (Fr r')) as [H12|H12]. 
                        { apply free_replace2; try assumption. right.
                          split; try assumption. intros H11. apply H10. 
                          symmetry. assumption. }
                        { rewrite free_replace1; assumption. }}
                  apply H8. apply (free_var _ _ s' z).
                  rewrite (StrongAlpha_free _ _ s' (fmap (y // x) r'));
                  try assumption. apply Cong_transitive with s1; 
                  try assumption. apply Cong_symmetric. assumption. }
              apply ALamxy with (fmap (y // z) r'); try assumption.
                { apply Cong_transitive with r'; try assumption.
                  apply Cong_symmetric. apply StrongAlpha_replace_self;
                  try assumption. }
                { assert (fmap (x // y) (fmap (z // x) (fmap (y // z) r'))
                        = fmap (z // y) (fmap (x // z) (fmap (y // x) r'))) as H9.
                    { rewrite <- fmap_comp', <- fmap_comp'.
                      rewrite <- fmap_comp', <- fmap_comp'.
                      apply var_support. intros u H9.
                      assert (u <> y) as H11.
                        { intros H12. subst. apply H4. assumption. }
                      unfold comp.
                      destruct (eqDec u x) as [H12|H12]; 
                      destruct (eqDec u z) as [H13|H13].
                        { subst. reflexivity. }
                        { subst. rewrite replace_x.
                          rewrite (replace_not_x _ _ z y x); try assumption.
                          rewrite replace_x.
                          rewrite (replace_not_x _ _ y x z).
                            { rewrite (replace_not_x _ _ z x y); try assumption.
                              rewrite replace_x. reflexivity. }
                            { intros H14. subst. apply H5. reflexivity. }}
                        { subst. rewrite replace_x.
                          rewrite (replace_not_x _ _ x z y).
                            { rewrite replace_x.
                              rewrite (replace_not_x _ _ x y z); try assumption.
                              rewrite replace_x.
                              rewrite (replace_not_x _ _ y z x); try assumption.
                              reflexivity. }
                            { intros H13. subst. apply H1. reflexivity. }}
                        { rewrite (replace_not_x _ _ z y u); try assumption.
                          rewrite (replace_not_x _ _ x z u); try assumption.
                          rewrite (replace_not_x _ _ y x u); try assumption.
                          rewrite (replace_not_x _ _ x y u); try assumption.
                          rewrite (replace_not_x _ _ z x u); try assumption.
                          rewrite (replace_not_x _ _ y z u); try assumption.
                          reflexivity. }}
                  apply Cong_transitive with (fmap (z // y) s'); try assumption. 
                  apply Cong_symmetric.
                  assert (fmap (z // x) (fmap (y // z) r') ~
                    fmap (x // y) (fmap (z // x) (fmap (y // z) r'))) as H11. 
                    { apply Cong_symmetric, StrongAlpha_replace_self.
                        { apply var_replace_remove. assumption. }
                        { intros H11. assert (y :: Fr (fmap (y // z) r')) as H12.
                            { destruct (in_dec eqDec x (Fr (fmap (y // z) r')))
                              as [H13|H13]. 
                                { rewrite free_replace2 in H11; try assumption.
                                    { destruct H11 as [H11|H11].
                                        { subst. exfalso. apply H5. reflexivity. }
                                        { destruct H11 as [H11 H14]. assumption. }}
                                    { apply var_replace_remove. intros H14. subst.
                                      apply H5. reflexivity. }}
                                { rewrite free_replace1 in H11; try assumption.
                                  apply var_replace_remove. intros H14. subst.
                                  apply H5. reflexivity. }}
                      apply H4. apply (free_var _ _ _). 
                      rewrite free_replace1 in H12; assumption. }}
                  assert (fmap (z // y) s' ~
                    fmap (z // y) (fmap (x // z) (fmap (y // x) r'))) as H12.
                    { apply StrongAlpha_replace; try assumption.
                        { apply var_replace_remove. intros H12. subst.
                          apply H10. reflexivity. }
                        { apply Cong_symmetric.
                          apply Cong_transitive with s1; try assumption.
                          apply Cong_symmetric.
                          apply Cong_transitive with (fmap (y // x) r');
                          try assumption. apply Cong_symmetric.
                          apply StrongAlpha_replace_self.
                            { apply var_replace_remove; try assumption. }
                            { intros H12. 
                              destruct (in_dec eqDec x (Fr r')) as [H13|H13].
                                { rewrite free_replace2 in H12; try assumption.
                                  destruct H12 as [H12|[H12 H14]]. 
                                    { subst. apply H5. reflexivity. }
                                    { apply K in H12. contradiction. }}
                                { rewrite free_replace1 in H12; try assumption.
                                  apply K in H12. contradiction. }}}}
                  apply Cong_transitive with 
                    (fmap (x // y) (fmap (z // x) (fmap (y // z) r'))).
                    { assumption. }
                    { apply Cong_symmetric. rewrite H9. assumption. }}
                { apply var_replace_remove. intros H11. 
                  apply H5. symmetry. assumption. }}
Qed.

(* Almost strong equivalence implies strong equivalence.                        *)
Lemma almostStrongAlpha : forall (v:Type) (e:Eq v) (t s:T v),
   t :~: s -> t ~ s.
Proof.
    intros v e t s H1.
    destruct H1 as [x|t1 t2 s1 s2 H1 H2|x t1 s1|x y t1 s1 r' H1 H2 H3 H4].
    - apply Cong_reflexive.
    - apply CongApp; assumption.
    - apply CongLam. assumption.
    - apply Cong_transitive with (Lam x r').
        + apply CongLam. assumption.
        + apply Cong_symmetric. 
          apply Cong_transitive with (Lam y (fmap (y // x) r')).
            { apply CongLam. assumption. }
            { apply Cong_symmetric, CongBase. constructor; assumption. }
Qed.
