Require Import Logic.Class.Eq.

Require Import Logic.Func.Replace.

Require Import Logic.List.In.

Require Import Logic.Lam.Free.
Require Import Logic.Lam.Syntax.
Require Import Logic.Lam.Functor.
Require Import Logic.Lam.Variable.
Require Import Logic.Lam.Congruence.

(* Generator of strong alpha-equivalence.                                       *)
Inductive StrongAlpha0 (v:Type) (e:Eq v) : T v -> T v -> Prop :=
| mkStrongAlpha0: forall (x y:v) (t1:T v), 
    x <> y        -> 
    ~ y :: var t1 ->
    StrongAlpha0 v e (Lam x t1) (Lam y (fmap (y // x) t1)) 
.

Arguments StrongAlpha0 {v} {e}.
Arguments mkStrongAlpha0 {v} {e}.

(* The strong alpha-equivalence is the congruence generated by StrongAlph0.     *)
Definition StrongAlpha (v:Type) (e:Eq v) : T v -> T v -> Prop := 
    Cong (@StrongAlpha0 v e).

Arguments StrongAlpha {v} {e}.

Notation "t ~ s" := (StrongAlpha t s)
    (at level 60, no associativity) : Fol_StrongAlpha_scope.

Open Scope Fol_StrongAlpha_scope.

(*
Lemma StrongAlpha_free : forall (v:Type) (e:Eq v) (t s:T v), 
    t ~ s -> Fr t = Fr s.
Proof.

Show.
*)
